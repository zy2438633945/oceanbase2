***************   Case 0   ***************
SQL: select * from (select * from t1 order by c2) a limit 1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |80  |
|1 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(1)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 1   ***************
SQL: select * from t1 order by c2 limit 1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |80  |
|1 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(1)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 2   ***************
SQL: select * from (select * from t1 order by c2) a limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 3   ***************
SQL: select * from t1 order by c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 4   ***************
SQL: select * from (select * from t1 order by c2 desc) a limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, DESC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 5   ***************
SQL: select * from t1 order by c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 6   ***************
SQL: select * from t1 order by c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 7   ***************
SQL: select * from t1 order by c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 8   ***************
SQL: select * from (select * from t1 order by c2 desc) a where 1 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([0]), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, DESC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 9   ***************
SQL: select * from t1 order by c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 10   ***************
SQL: select * from (select * from (select * from (select * from (select * from (select * from (select * from t1 order by c2) a) b) c) d) e) f limit 1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |80  |
|1 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(1)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 11   ***************
SQL: select * from (select * from (select d.* from (select c.* from (select * from (select * from (select * from t1 order by c2) a) b) c) d) e) f limit 1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |80  |
|1 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(1)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 12   ***************
SQL: select * from (select * from t1) a order by a.c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 13   ***************
SQL: select * from t1 order by c2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |10       |89  |
|1 | TOP-N SORT |    |11       |89  |
|2 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10 + ?)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 14   ***************
SQL: select count(*) from (select * from t1) a group by a.c2 limit 1, 10; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |LIMIT         |    |9        |106 |
|1 | HASH GROUP BY|    |10       |106 |
|2 |  TABLE SCAN  |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_COUNT(*)]), filter(nil), limit(10), offset(?)
  1 - output([T_FUN_COUNT(*)]), filter(nil), 
      group([t1.c2]), agg_func([T_FUN_COUNT(*)])
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 15   ***************
SQL: select a.c1 from (select * from t1) a group by a.c2 limit 1, 10; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |LIMIT         |    |9        |104 |
|1 | HASH GROUP BY|    |10       |104 |
|2 |  TABLE SCAN  |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), limit(10), offset(?)
  1 - output([t1.c1]), filter(nil), 
      group([t1.c2]), agg_func(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 16   ***************
SQL: select a.c2 from (select * from t1) a; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 17   ***************
SQL: select * from (select * from t1) a, t1 where a.c2 = t1.c2 limit 10; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |LIMIT         |    |10       |150 |
|1 | HASH JOIN    |    |10       |150 |
|2 |  SUBPLAN SCAN|a   |100      |80  |
|3 |   TABLE SCAN |t1  |100      |78  |
|4 |  TABLE SCAN  |t1  |2        |46  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([a.c1], [a.c2], [t1.c1], [t1.c2]), filter(nil), limit(10), offset(nil)
  1 - output([a.c1], [a.c2], [t1.c1], [t1.c2]), filter(nil), 
      equal_conds([a.c2 = t1.c2]), other_conds(nil)
  2 - output([a.c2], [a.c1]), filter(nil), 
      access([a.c2], [a.c1])
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 18   ***************
SQL: select * from (select * from t1) a where a.c2 = 1 limit 1; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c2 = ?]), 
      access([t1.c1], [t1.c2]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 19   ***************
SQL: select distinct a.c1 from (select * from t1) a limit 1; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 20   ***************
SQL: select b.c2 from (select * from (select * from t1) a limit 10) b; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |10       |46  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0), 
      limit(10), offset(nil)

***************   Case 21   ***************
SQL: (select * from (select * from t1) a limit 10) union all (select * from (select * from t1) b limit 10); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UNION ALL  |    |20       |92  |
|1 | TABLE SCAN|t1  |10       |46  |
|2 | TABLE SCAN|t1  |10       |46  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0), 
      limit(10), offset(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0), 
      limit(10), offset(nil)

***************   Case 22   ***************
SQL: select * from (select * from t1 order by c2) a where exists (select * from t1) limit 10; 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |TOP-N SORT     |    |10       |136 |
|1 | SUBPLAN FILTER|    |100      |125 |
|2 |  TABLE SCAN   |t1  |100      |78  |
|3 |  TABLE SCAN   |t1  |1        |46  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(10)
  1 - output([t1.c2], [t1.c1]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 23   ***************
SQL: select now(), b.* from (select c2 from t1 group by c2) as b; 
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |10       |104 |
|1 | TABLE SCAN  |t1  |100      |78  |
======================================

Outputs & filters: 
-------------------------------------
  0 - output([?], [t1.c2]), filter(nil), 
      group([t1.c2]), agg_func(nil)
  1 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 24   ***************
SQL: select * from tl0 union distinct select * from tr0; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl0 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl0.c1]), filter(nil), 
      access([tl0.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 25   ***************
SQL: select * from tl0 union distinct select * from tr1; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl0 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl0.c1]), filter(nil), 
      access([tl0.c1]), partitions(p0)
  2 - output(['1']), filter(nil)
      values({'1'})

***************   Case 26   ***************
SQL: select * from tl0 union distinct select * from tr2; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl0 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl0.c1]), filter(nil), 
      access([tl0.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 27   ***************
SQL: select * from tl0 union distinct select * from tr3; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl0 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl0.c1]), filter(nil), 
      access([tl0.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 28   ***************
SQL: select * from tl1 union distinct select * from tr0; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl1 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl1.c1, BIGINT(20, 0))]), filter(nil), 
      access([tl1.c1]), partitions(p0)
  2 - output([1]), filter(nil)
      values({1})

***************   Case 29   ***************
SQL: select * from tl1 union distinct select * from tr1; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl1 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl1.c1, VARCHAR(11))]), filter(nil), 
      access([tl1.c1]), partitions(p0)
  2 - output(['1']), filter(nil)
      values({'1'})

***************   Case 30   ***************
SQL: select * from tl1 union distinct select * from tr2; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl1 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl1.c1, DECIMAL(12, 1))]), filter(nil), 
      access([tl1.c1]), partitions(p0)
  2 - output([1.1]), filter(nil)
      values({1.1})

***************   Case 31   ***************
SQL: select * from tl1 union distinct select * from tr3; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl1 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl1.c1, VARCHAR(11))]), filter(nil), 
      access([tl1.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 32   ***************
SQL: select * from tl2 union distinct select * from tr0; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |124 |
|1 | TABLE SCAN        |tl2 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl2.c1]), filter(nil), 
      access([tl2.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 33   ***************
SQL: select * from tl2 union distinct select * from tr1; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |124 |
|1 | TABLE SCAN        |tl2 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl2.c1, VARCHAR(23))]), filter(nil), 
      access([tl2.c1]), partitions(p0)
  2 - output(['1']), filter(nil)
      values({'1'})

***************   Case 34   ***************
SQL: select * from tl2 union distinct select * from tr2; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |124 |
|1 | TABLE SCAN        |tl2 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl2.c1]), filter(nil), 
      access([tl2.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 35   ***************
SQL: select * from tl2 union distinct select * from tr3; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |124 |
|1 | TABLE SCAN        |tl2 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl2.c1, VARCHAR(23))]), filter(nil), 
      access([tl2.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 36   ***************
SQL: select * from tl3 union distinct select * from tr0; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl3 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl3.c1, VARCHAR(20))]), filter(nil), 
      access([tl3.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 37   ***************
SQL: select * from tl3 union distinct select * from tr1; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl3 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl3.c1, VARCHAR(10))]), filter(nil), 
      access([tl3.c1]), partitions(p0)
  2 - output(['1']), filter(nil)
      values({'1'})

***************   Case 38   ***************
SQL: select * from tl3 union distinct select * from tr2; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl3 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([cast(tl3.c1, VARCHAR(10))]), filter(nil), 
      access([tl3.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

***************   Case 39   ***************
SQL: select * from tl3 union distinct select * from tr3; 
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |101      |123 |
|1 | TABLE SCAN        |tl3 |100      |78  |
|2 | EXPRESSION        |    |1        |1   |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([tl3.c1]), filter(nil), 
      access([tl3.c1]), partitions(p0)
  2 - output([?]), filter(nil)
      values({?})

