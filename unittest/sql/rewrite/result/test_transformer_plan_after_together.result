***************   Case 0   ***************
SQL: select * from t1 where c1 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([0]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 1   ***************
SQL: select * from t10 where c3 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t10 |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t10.c1], [t10.c2], [t10.c3]), filter(nil), startup_filter([0]), 
      access([t10.c3], [t10.c1], [t10.c2]), partitions(p0)

***************   Case 2   ***************
SQL: select * from t1 where c2 = 2 and c1 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([0]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 3   ***************
SQL: select * from t1 where t1.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE GET    |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), startup_filter([0]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 4   ***************
SQL: select * from t1 inner join t3 on (t1.c1 = t3.c1) where t1.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |97  |
|1 | NESTED-LOOP JOIN|    |1        |51  |
|2 |  TABLE GET      |t1  |1        |46  |
|3 |  TABLE GET      |t3  |1        |5   |
|4 | TABLE SCAN      |t2  |1        |46  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  4 - output([t2.c1]), filter(nil), startup_filter([0]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 5   ***************
SQL: select * from (select * from pt3)  as tt where c6 = (select t2.c1 from t2 where c6 is NULL limit 1); 
=====================================================
|ID|OPERATOR                |NAME    |EST. ROWS|COST|
-----------------------------------------------------
|0 |SUBPLAN FILTER          |        |1        |204 |
|1 | PX COORDINATOR         |        |1        |158 |
|2 |  EXCHANGE OUT DISTR    |:EX10000|1        |158 |
|3 |   PX PARTITION ITERATOR|        |1        |158 |
|4 |    TABLE SCAN          |pt3     |1        |158 |
|5 | TABLE SCAN             |t2      |1        |46  |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil), 
      exec_params_(nil), onetime_exprs_([cast(subquery(1), DECIMAL(11, 0))]), init_plan_idxs_(nil)
  1 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil)
  2 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil), dop=1
  3 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil)
  4 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter([cast(pt3.c6, DECIMAL(-1, -1)) = ?]), 
      access([pt3.c4], [pt3.c5], [pt3.c6]), partitions(p[0-1])
  5 - output([t2.c1]), filter(nil), startup_filter([0]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 6   ***************
SQL: select * from t1 right join t3 on (t1.c1 = t3.c1) where t1.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |97  |
|1 | NESTED-LOOP JOIN|    |1        |51  |
|2 |  TABLE GET      |t1  |1        |46  |
|3 |  TABLE GET      |t3  |1        |5   |
|4 | TABLE SCAN      |t2  |1        |46  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  4 - output([t2.c1]), filter(nil), startup_filter([0]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 7   ***************
SQL: select * from t3 left join t1 on (t1.c1 = t3.c1) where t1.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |97  |
|1 | NESTED-LOOP JOIN|    |1        |51  |
|2 |  TABLE GET      |t1  |1        |46  |
|3 |  TABLE GET      |t3  |1        |5   |
|4 | TABLE SCAN      |t2  |1        |46  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3], [t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3], [t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  4 - output([t2.c1]), filter(nil), startup_filter([0]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 8   ***************
SQL: select * from t1 where c1 is NOT NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 9   ***************
SQL: select * from t1 as a inner join (select * from t1) as b using(c1) where a.c1 is not null; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|a   |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([a.c1], [a.c2], [a.c2]), filter(nil), 
      access([a.c1], [a.c2]), partitions(p0)

***************   Case 10   ***************
SQL: select * from t1 as a inner join (select * from t1) as b using(c1) where a.c1 is not null; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|a   |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([a.c1], [a.c2], [a.c2]), filter(nil), 
      access([a.c1], [a.c2]), partitions(p0)

***************   Case 11   ***************
SQL: select * from t11 where c3 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t11 |50       |80  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t11.c1], [t11.c2], [t11.c3]), filter([(T_OP_IS, cast(t11.c3, BIGINT(-1, 0)), NULL, 1)]), 
      access([t11.c1], [t11.c3], [t11.c2]), partitions(p0)

***************   Case 12   ***************
SQL: select * from t11 where c2 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t11 |50       |80  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t11.c1], [t11.c2], [t11.c3]), filter([(T_OP_IS, cast(t11.c2, BIGINT(-1, 0)), NULL, 1)]), 
      access([t11.c1], [t11.c2], [t11.c3]), partitions(p0)

***************   Case 13   ***************
SQL: select * from t1 where c2 = 2 or c1 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |9        |79  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c2 = ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 14   ***************
SQL: select * from t3 left join t1 on (t1.c1 = t3.c1) where t1.c1 is NULL; 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |MERGE ANTI JOIN|    |1        |165 |
|1 | TABLE SCAN    |t3  |100      |78  |
|2 | TABLE SCAN    |t1  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3], [?], [?]), filter(nil), 
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 15   ***************
SQL: select * from t1 right join t3 on (t1.c1 = t3.c1) where t1.c1 is NULL; 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |MERGE ANTI JOIN|    |1        |165 |
|1 | TABLE SCAN    |t3  |100      |78  |
|2 | TABLE SCAN    |t1  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([?], [?], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 16   ***************
SQL: select * from t1 full outer join t3 on (t1.c1 = t3.c1) where t1.c1 is NULL; 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |MERGE FULL OUTER JOIN|    |1        |188 |
|1 | TABLE SCAN          |t3  |100      |78  |
|2 | TABLE SCAN          |t1  |100      |78  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter([(T_OP_IS, t1.c1, NULL, 0)]), 
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 17   ***************
SQL: select * from (select * from t4) as tt where c1 is NULL; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t4  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t4.c1], [t4.c2], [t4.c3]), filter(nil), startup_filter([0]), 
      access([t4.c1], [t4.c2], [t4.c3]), partitions(p0)

***************   Case 18   ***************
SQL: select * from t1 right join t3 on (t1.c1 = t3.c1) where t3.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |4729|
|1 | MERGE OUTER JOIN|    |100      |188 |
|2 |  TABLE SCAN     |t3  |100      |78  |
|3 |  TABLE SCAN     |t1  |100      |78  |
|4 | TABLE SCAN      |t2  |1        |46  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter([t3.c1 = subquery(1)]), 
      exec_params_([(T_OP_IS, t1.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  2 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1]), filter(nil), startup_filter([?]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 19   ***************
SQL: select * from t3 left join t1 on (t1.c1 = t3.c1) where t3.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |4729|
|1 | MERGE OUTER JOIN|    |100      |188 |
|2 |  TABLE SCAN     |t3  |100      |78  |
|3 |  TABLE SCAN     |t1  |100      |78  |
|4 | TABLE SCAN      |t2  |1        |46  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3], [t1.c1], [t1.c2]), filter([t3.c1 = subquery(1)]), 
      exec_params_([(T_OP_IS, t1.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3], [t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  2 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1]), filter(nil), startup_filter([?]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 20   ***************
SQL: select * from t3 left join (t1 inner join t4 on (t1.c2 = t4.c1)) on (t1.c2 = t3.c1) where t3.c1 = (select t2.c1 from t2 where t1.c1 is NULL limit 1); 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |1        |4869|
|1 | HASH OUTER JOIN|    |100      |328 |
|2 |  TABLE SCAN    |t3  |100      |78  |
|3 |  HASH JOIN     |    |91       |204 |
|4 |   TABLE SCAN   |t1  |100      |78  |
|5 |   TABLE SCAN   |t4  |100      |78  |
|6 | TABLE SCAN     |t2  |1        |46  |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3], [t1.c1], [t1.c2], [t4.c1], [t4.c2], [t4.c3]), filter([t3.c1 = subquery(1)]), 
      exec_params_([(T_OP_IS, t1.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3], [t1.c1], [t1.c2], [t4.c1], [t4.c2], [t4.c3]), filter(nil), 
      equal_conds([t1.c2 = t3.c1]), other_conds(nil)
  2 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2], [t4.c1], [t4.c2], [t4.c3]), filter(nil), 
      equal_conds([t1.c2 = t4.c1]), other_conds(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t4.c1], [t4.c2], [t4.c3]), filter(nil), 
      access([t4.c1], [t4.c2], [t4.c3]), partitions(p0)
  6 - output([t2.c1]), filter(nil), startup_filter([?]), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 21   ***************
SQL: select * from (select c1 from t1 union all select c1 from t2 limit 1) as tt; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |1        |91  |
|1 | UNION ALL  |    |1        |91  |
|2 |  TABLE SCAN|t1  |1        |46  |
|3 |  TABLE SCAN|t2  |1        |46  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 22   ***************
SQL: select * from t2 where t2.c2 in (select c1 from t1 union all select c1 from t2 limit 1); 
========================================
|ID|OPERATOR      |NAME |EST. ROWS|COST|
----------------------------------------
|0 |HASH JOIN     |     |9        |193 |
|1 | SUBPLAN SCAN |VIEW1|1        |91  |
|2 |  LIMIT       |     |1        |91  |
|3 |   UNION ALL  |     |1        |91  |
|4 |    TABLE SCAN|t1   |1        |46  |
|5 |    TABLE SCAN|t2   |1        |46  |
|6 | TABLE SCAN   |t2   |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t2.c2 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), 
      access([VIEW1.c1])
  2 - output([UNION([1])]), filter(nil), limit(1), offset(nil)
  3 - output([UNION([1])]), filter(nil)
  4 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)
  5 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)
  6 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 23   ***************
SQL: select * from ((select c1 from t1 order by c2) union (select c1 from t2)) as tt; 
=============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |MERGE UNION DISTINCT|    |200      |159 |
|1 | TABLE SCAN         |t1  |100      |78  |
|2 | TABLE SCAN         |t2  |100      |78  |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 24   ***************
SQL: select * from t2 where t2.c2 in ((select c1 from t1 order by c2) union (select c1 from t2)); 
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH JOIN             |     |91       |313 |
|1 | SUBPLAN SCAN         |VIEW1|200      |163 |
|2 |  MERGE UNION DISTINCT|     |200      |159 |
|3 |   TABLE SCAN         |t1   |100      |78  |
|4 |   TABLE SCAN         |t2   |100      |78  |
|5 | TABLE SCAN           |t2   |100      |78  |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t2.c2 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), 
      access([VIEW1.c1])
  2 - output([UNION([1])]), filter(nil)
  3 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 25   ***************
SQL: select * from (select c1 from t1 order by c1, c1) as tt; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 26   ***************
SQL: select * from t2 where c2 in (select c1 from t1 order by c1, c1); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |91       |203 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t2.c2 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 27   ***************
SQL: select * from t2 where c2 = (select c1 from t1 order by c1, c1 limit 1); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |9        |126 |
|1 | TABLE SCAN   |t2  |9        |80  |
|2 | TABLE SCAN   |t1  |1        |46  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c2 = ?]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 28   ***************
SQL: select * from (select c1 from t1 group by c1 desc) as tt; 
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 29   ***************
SQL: select * from t2 where c2 in (select c1 from t1 group by c1 desc); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |91       |203 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t2.c2 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 30   ***************
SQL: select c1 from t1 union all select c1 from t2 limit 1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |1        |91  |
|1 | UNION ALL  |    |1        |91  |
|2 |  TABLE SCAN|t1  |1        |46  |
|3 |  TABLE SCAN|t2  |1        |46  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 31   ***************
SQL: select c1 from t1 union all select c1 from t2 order by c1 limit 1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |TOP-N SORT  |    |1        |91  |
|1 | UNION ALL  |    |2        |91  |
|2 |  TABLE SCAN|t1  |1        |46  |
|3 |  TABLE SCAN|t2  |1        |46  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), sort_keys([UNION([1]), ASC]), topn(1)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 32   ***************
SQL: select c2 from t2 union all select c2 from t3 order by c2 limit 1; 
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |TOP-N SORT   |    |1        |159 |
|1 | UNION ALL   |    |2        |159 |
|2 |  TOP-N SORT |    |1        |80  |
|3 |   TABLE SCAN|t2  |100      |78  |
|4 |  TOP-N SORT |    |1        |80  |
|5 |   TABLE SCAN|t3  |100      |78  |
======================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), sort_keys([UNION([1]), ASC]), topn(1)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t2.c2]), filter(nil), sort_keys([t2.c2, ASC]), topn(1)
  3 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  4 - output([t3.c2]), filter(nil), sort_keys([t3.c2, ASC]), topn(1)
  5 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)

***************   Case 33   ***************
SQL: (select c2, c3 from t2 limit 1) union all (select c2, c3 from t3 order by c3) limit 1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |1        |91  |
|1 | UNION ALL  |    |1        |91  |
|2 |  TABLE SCAN|t2  |1        |46  |
|3 |  TABLE SCAN|t3  |1        |46  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])], [UNION([2])]), filter(nil)
  2 - output([t2.c2], [t2.c3]), filter(nil), 
      access([t2.c2], [t2.c3]), partitions(p0), 
      limit(1), offset(nil)
  3 - output([t3.c2], [t3.c3]), filter(nil), 
      access([t3.c2], [t3.c3]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 34   ***************
SQL: (select c2, c3 from t2 order by c3) union all (select c2, c3 from t3 order by c2) limit 1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |1        |91  |
|1 | UNION ALL  |    |1        |91  |
|2 |  TABLE SCAN|t2  |1        |46  |
|3 |  TABLE SCAN|t3  |1        |46  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])], [UNION([2])]), filter(nil)
  2 - output([t2.c2], [t2.c3]), filter(nil), 
      access([t2.c2], [t2.c3]), partitions(p0), 
      limit(1), offset(nil)
  3 - output([t3.c2], [t3.c3]), filter(nil), 
      access([t3.c2], [t3.c3]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 35   ***************
SQL: (select c2, c3 from t2) union all (select c2, c3 from t3 order by c3) order by c2 limit 1; 
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |TOP-N SORT   |    |1        |161 |
|1 | UNION ALL   |    |2        |161 |
|2 |  TOP-N SORT |    |1        |81  |
|3 |   TABLE SCAN|t2  |100      |78  |
|4 |  TOP-N SORT |    |1        |81  |
|5 |   TABLE SCAN|t3  |100      |78  |
======================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), sort_keys([UNION([1]), ASC]), topn(1)
  1 - output([UNION([1])], [UNION([2])]), filter(nil)
  2 - output([t2.c2], [t2.c3]), filter(nil), sort_keys([t2.c2, ASC]), topn(1)
  3 - output([t2.c2], [t2.c3]), filter(nil), 
      access([t2.c2], [t2.c3]), partitions(p0)
  4 - output([t3.c2], [t3.c3]), filter(nil), sort_keys([t3.c2, ASC]), topn(1)
  5 - output([t3.c2], [t3.c3]), filter(nil), 
      access([t3.c2], [t3.c3]), partitions(p0)

***************   Case 36   ***************
SQL: select c1 from t1 union all select c1 from t2; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UNION ALL  |    |200      |159 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 37   ***************
SQL: select c1 from t1 union select c1 from t2 limit 1; 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |LIMIT                |    |1        |91  |
|1 | MERGE UNION DISTINCT|    |1        |91  |
|2 |  TABLE SCAN         |t1  |1        |46  |
|3 |  TABLE SCAN         |t2  |1        |46  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(1), offset(nil)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 38   ***************
SQL: select SQL_CALC_FOUND_ROWS c1 from t1 union all select c1 from t2 limit 1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |1        |162 |
|1 | UNION ALL  |    |200      |159 |
|2 |  TABLE SCAN|t1  |100      |78  |
|3 |  TABLE SCAN|t2  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 39   ***************
SQL: select SQL_CALC_FOUND_ROWS c1 from t1 union all select c1 from t2 union all select c1 from t2 limit 1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |1        |243 |
|1 | UNION ALL  |    |300      |238 |
|2 |  TABLE SCAN|t1  |100      |78  |
|3 |  TABLE SCAN|t2  |100      |78  |
|4 |  TABLE SCAN|t2  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), limit(1), offset(nil)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  4 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 40   ***************
SQL: select c1 from t1 union all select c1 from t2 limit 1, 10; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |0        |0   |
|1 | UNION ALL  |    |0        |0   |
|2 |  TABLE SCAN|t1  |0        |0   |
|3 |  TABLE SCAN|t2  |0        |0   |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil), limit(10), offset(?)
  1 - output([UNION([1])]), filter(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0), 
      limit(?), offset(nil)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(?), offset(nil)

***************   Case 41   ***************
SQL: select c1 from t1 union distinct select c1 from t2 order by c1; 
=============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |MERGE UNION DISTINCT|    |200      |159 |
|1 | TABLE SCAN         |t1  |100      |78  |
|2 | TABLE SCAN         |t2  |100      |78  |
=============================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 42   ***************
SQL: select c1 from t1 where c1 not in(select c1 from t2 where c2 not in (select c2 from t2)); 
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |MERGE ANTI JOIN           |     |92       |309 |
|1 | TABLE SCAN               |t1   |100      |78  |
|2 | SORT                     |     |9        |208 |
|3 |  SUBPLAN SCAN            |VIEW2|9        |206 |
|4 |   HASH RIGHT ANTI JOIN NA|     |9        |206 |
|5 |    TABLE SCAN            |t2   |100      |78  |
|6 |    TABLE SCAN            |t2   |100      |78  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      equal_conds([t1.c1 = VIEW2.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([VIEW2.c1]), filter(nil), sort_keys([VIEW2.c1, ASC])
  3 - output([VIEW2.c1]), filter(nil), 
      access([VIEW2.c1])
  4 - output([t2.c1]), filter(nil), 
      equal_conds([t2.c2 = t2.c2]), other_conds(nil)
  5 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  6 - output([t2.c1], [t2.c2]), filter(nil), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 43   ***************
SQL: select * from (select * from pt2 left join pt3 on pt2.c1 = pt3.c4) as v; 
==========================================================
|ID|OPERATOR                     |NAME    |EST. ROWS|COST|
----------------------------------------------------------
|0 |PX COORDINATOR               |        |300      |1119|
|1 | EXCHANGE OUT DISTR          |:EX10001|300      |977 |
|2 |  HASH RIGHT OUTER JOIN      |        |300      |665 |
|3 |   EXCHANGE IN DISTR         |        |200      |310 |
|4 |    EXCHANGE OUT DISTR (PKEY)|:EX10000|200      |261 |
|5 |     PX PARTITION ITERATOR   |        |200      |155 |
|6 |      TABLE SCAN             |pt3     |200      |155 |
|7 |   PX PARTITION ITERATOR     |        |300      |233 |
|8 |    TABLE SCAN               |pt2     |300      |233 |
==========================================================

Outputs & filters: 
-------------------------------------
  0 - output([INTERNAL_FUNCTION(pt2.c1, pt2.c2, pt2.c3, pt3.c4, pt3.c5, pt3.c6)]), filter(nil)
  1 - output([INTERNAL_FUNCTION(pt2.c1, pt2.c2, pt2.c3, pt3.c4, pt3.c5, pt3.c6)]), filter(nil), dop=1
  2 - output([pt2.c1], [pt3.c4], [pt3.c5], [pt3.c6], [pt2.c2], [pt2.c3]), filter(nil), 
      equal_conds([pt2.c1 = pt3.c4]), other_conds(nil)
  3 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil)
  4 - (#keys=1, [pt3.c4]), output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil), dop=1
  5 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil)
  6 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil), 
      access([pt3.c4], [pt3.c5], [pt3.c6]), partitions(p[0-1])
  7 - output([pt2.c1], [pt2.c2], [pt2.c3]), filter(nil)
  8 - output([pt2.c1], [pt2.c2], [pt2.c3]), filter(nil), 
      access([pt2.c1], [pt2.c2], [pt2.c3]), partitions(p[0-2])

***************   Case 44   ***************
SQL: select * from pt2 left join pt3 on pt2.c1 = pt3.c4; 
==========================================================
|ID|OPERATOR                     |NAME    |EST. ROWS|COST|
----------------------------------------------------------
|0 |PX COORDINATOR               |        |300      |1119|
|1 | EXCHANGE OUT DISTR          |:EX10001|300      |977 |
|2 |  HASH RIGHT OUTER JOIN      |        |300      |665 |
|3 |   EXCHANGE IN DISTR         |        |200      |310 |
|4 |    EXCHANGE OUT DISTR (PKEY)|:EX10000|200      |261 |
|5 |     PX PARTITION ITERATOR   |        |200      |155 |
|6 |      TABLE SCAN             |pt3     |200      |155 |
|7 |   PX PARTITION ITERATOR     |        |300      |233 |
|8 |    TABLE SCAN               |pt2     |300      |233 |
==========================================================

Outputs & filters: 
-------------------------------------
  0 - output([INTERNAL_FUNCTION(pt2.c1, pt2.c2, pt2.c3, pt3.c4, pt3.c5, pt3.c6)]), filter(nil)
  1 - output([INTERNAL_FUNCTION(pt2.c1, pt2.c2, pt2.c3, pt3.c4, pt3.c5, pt3.c6)]), filter(nil), dop=1
  2 - output([pt2.c1], [pt3.c4], [pt3.c5], [pt3.c6], [pt2.c2], [pt2.c3]), filter(nil), 
      equal_conds([pt2.c1 = pt3.c4]), other_conds(nil)
  3 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil)
  4 - (#keys=1, [pt3.c4]), output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil), dop=1
  5 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil)
  6 - output([pt3.c4], [pt3.c5], [pt3.c6]), filter(nil), 
      access([pt3.c4], [pt3.c5], [pt3.c6]), partitions(p[0-1])
  7 - output([pt2.c1], [pt2.c2], [pt2.c3]), filter(nil)
  8 - output([pt2.c1], [pt2.c2], [pt2.c3]), filter(nil), 
      access([pt2.c1], [pt2.c2], [pt2.c3]), partitions(p[0-2])

***************   Case 45   ***************
SQL: select t1.c1 from t1, (select c2 from t1 where 1 = any(select t3.c2 from t3 where t3.c2 > t1.c1)) as v; 
=====================================================
|ID|OPERATOR                   |NAME |EST. ROWS|COST|
-----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN |     |10000    |2809|
|1 | NESTED-LOOP JOIN CARTESIAN|     |100      |151 |
|2 |  TABLE SCAN               |t1   |100      |78  |
|3 |  MATERIAL                 |     |1        |46  |
|4 |   SUBPLAN SCAN            |VIEW1|1        |46  |
|5 |    TABLE SCAN             |t3   |1        |46  |
|6 | MATERIAL                  |     |100      |78  |
|7 |  TABLE SCAN               |t1   |100      |78  |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access(nil)
  5 - output([1]), filter([t3.c2 = ?]), 
      access([t3.c2]), partitions(p0), 
      limit(1), offset(nil)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 46   ***************
SQL: SELECT X.c1, X.c2, Y.c2  FROM t1 AS X RIGHT OUTER JOIN t1 AS Y ON X . c2 = Y . c2 WHERE X . c1 < -10; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |810      |203 |
|1 | TABLE SCAN|Y   |100      |78  |
|2 | TABLE SCAN|X   |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([X.c1], [X.c2], [Y.c2]), filter(nil), 
      equal_conds([X.c2 = Y.c2]), other_conds(nil)
  1 - output([Y.c2]), filter(nil), 
      access([Y.c2]), partitions(p0)
  2 - output([X.c1], [X.c2]), filter(nil), 
      access([X.c1], [X.c2]), partitions(p0)

***************   Case 47   ***************
SQL: SELECT X.c1, X.c2, Y.c2  FROM t1 AS X RIGHT OUTER JOIN t1 AS Y ON X . c2 = Y . c2 RIGHT OUTER JOIN t1 as Z on Y.c1 = Z.c1 WHERE X . c1 < -10; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |810      |203 |
|1 | TABLE SCAN|Z   |100      |78  |
|2 | TABLE SCAN|X   |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([X.c1], [X.c2], [Z.c2]), filter(nil), 
      equal_conds([X.c2 = Z.c2]), other_conds(nil)
  1 - output([Z.c2]), filter(nil), 
      access([Z.c2]), partitions(p0)
  2 - output([X.c1], [X.c2]), filter(nil), 
      access([X.c1], [X.c2]), partitions(p0)

***************   Case 48   ***************
SQL: select c from v2 where exists (select * from tt2 where a=2 and b=c); 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |81       |144 |
|1 | TABLE GET      |tt2 |1        |46  |
|2 | TABLE SCAN     |tt2 |81       |79  |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([tt2.a + 1]), filter(nil), 
      conds([tt2.b = tt2.a + 1]), nl_params_(nil)
  1 - output([tt2.b]), filter(nil), 
      access([tt2.b]), partitions(p0)
  2 - output([tt2.a]), filter([tt2.b >= 4]), 
      access([tt2.a], [tt2.b]), partitions(p0)

***************   Case 49   ***************
SQL: select first.col2 from nv1 first where first.col2 in (select second.c2 from t1 second where first.col1 and first.col2); 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |25       |81  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c2]), filter([t1.c1], [t1.c2]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 50   ***************
SQL: select first.col2 from nv1 first where first.col2 in (select second.c2 from t1 second where first.col1 + first.col2); 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |50       |80  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c2]), filter([t1.c1 + t1.c2]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 51   ***************
SQL: select first.col2 from nv1 first where first.col2 in (select second.c2 from t1 second where first.col1); 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |45       |81  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c2]), filter([t1.c1], [(T_OP_IS_NOT, t1.c2, NULL, 0)]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 52   ***************
SQL: select * from t1, t2  where t1.c1 > any(select t3.c2 from t2, t3 where t2.c1 > any(select t4.c1 from t4, t5)); 
==============================================================
|ID|OPERATOR                           |NAME |EST. ROWS|COST |
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN         |     |3334     |38057|
|1 | TABLE SCAN                        |t2   |100      |78   |
|2 | MATERIAL                          |     |34       |37118|
|3 |  NESTED-LOOP SEMI JOIN            |     |34       |37118|
|4 |   TABLE SCAN                      |t1   |100      |78   |
|5 |   MATERIAL                        |     |3334     |10349|
|6 |    SUBPLAN SCAN                   |VIEW2|3334     |10337|
|7 |     NESTED-LOOP JOIN CARTESIAN    |     |3334     |10279|
|8 |      TABLE SCAN                   |t3   |100      |78   |
|9 |      MATERIAL                     |     |34       |9340 |
|10|       NESTED-LOOP SEMI JOIN       |     |34       |9340 |
|11|        TABLE SCAN                 |t2   |100      |78   |
|12|        SUBPLAN SCAN               |VIEW1|1        |92   |
|13|         NESTED-LOOP JOIN CARTESIAN|     |1        |92   |
|14|          TABLE SCAN               |t5   |1        |46   |
|15|          MATERIAL                 |     |34       |47   |
|16|           TABLE SCAN              |t4   |34       |46   |
==============================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 > VIEW2.c2]), nl_params_(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([VIEW2.c2]), filter(nil)
  6 - output([VIEW2.c2]), filter(nil), 
      access([VIEW2.c2])
  7 - output([t3.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  8 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  9 - output(nil), filter(nil)
  10 - output(nil), filter(nil), 
      conds(nil), nl_params_([t2.c1])
  11 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  12 - output(nil), filter(nil), 
      access(nil)
  13 - output([t4.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  14 - output(nil), filter(nil), 
      access([t5.c1]), partitions(p0)
  15 - output([t4.c1]), filter(nil)
  16 - output([t4.c1]), filter(nil), 
      access([t4.c1]), partitions(p0)

***************   Case 53   ***************
SQL: select * from t1, (select * from (select * from t2) as v where v.c1 in (select c2 from t2)) as vv where t1.c1 in (select c2 from t2); 
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |100      |342 |
|1 | NESTED-LOOP JOIN         |     |10       |158 |
|2 |  SUBPLAN SCAN            |VIEW4|10       |104 |
|3 |   HASH DISTINCT          |     |10       |104 |
|4 |    TABLE SCAN            |t2   |100      |78  |
|5 |  TABLE GET               |t2   |1        |5   |
|6 | MATERIAL                 |     |10       |158 |
|7 |  NESTED-LOOP JOIN        |     |10       |158 |
|8 |   SUBPLAN SCAN           |VIEW3|10       |104 |
|9 |    HASH DISTINCT         |     |10       |104 |
|10|     TABLE SCAN           |t2   |100      |78  |
|11|   TABLE GET              |t1   |1        |5   |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_([VIEW4.VIEW2.c2])
  2 - output([VIEW4.VIEW2.c2]), filter(nil), 
      access([VIEW4.VIEW2.c2])
  3 - output([t2.c2]), filter(nil), 
      distinct([t2.c2])
  4 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  6 - output([t1.c1], [t1.c2]), filter(nil)
  7 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([VIEW3.VIEW1.c2])
  8 - output([VIEW3.VIEW1.c2]), filter(nil), 
      access([VIEW3.VIEW1.c2])
  9 - output([t2.c2]), filter(nil), 
      distinct([t2.c2])
  10 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  11 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 54   ***************
SQL: select * from t1 where t1.c1 > any(select t3.c2 from t2, t3 where t2.c1 > any(select t4.c1 from t4, t5)); 
============================================================
|ID|OPERATOR                         |NAME |EST. ROWS|COST |
------------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN            |     |34       |37118|
|1 | TABLE SCAN                      |t1   |100      |78   |
|2 | MATERIAL                        |     |3334     |10349|
|3 |  SUBPLAN SCAN                   |VIEW2|3334     |10337|
|4 |   NESTED-LOOP JOIN CARTESIAN    |     |3334     |10279|
|5 |    TABLE SCAN                   |t3   |100      |78   |
|6 |    MATERIAL                     |     |34       |9340 |
|7 |     NESTED-LOOP SEMI JOIN       |     |34       |9340 |
|8 |      TABLE SCAN                 |t2   |100      |78   |
|9 |      SUBPLAN SCAN               |VIEW1|1        |92   |
|10|       NESTED-LOOP JOIN CARTESIAN|     |1        |92   |
|11|        TABLE SCAN               |t5   |1        |46   |
|12|        MATERIAL                 |     |34       |47   |
|13|         TABLE SCAN              |t4   |34       |46   |
============================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 > VIEW2.c2]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([VIEW2.c2]), filter(nil)
  3 - output([VIEW2.c2]), filter(nil), 
      access([VIEW2.c2])
  4 - output([t3.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      conds(nil), nl_params_([t2.c1])
  8 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  9 - output(nil), filter(nil), 
      access(nil)
  10 - output([t4.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  11 - output(nil), filter(nil), 
      access([t5.c1]), partitions(p0)
  12 - output([t4.c1]), filter(nil)
  13 - output([t4.c1]), filter(nil), 
      access([t4.c1]), partitions(p0)

***************   Case 55   ***************
SQL: select * from t1 where t1.c1 > any(select t3.c2 from t2, t3); 
========================================================
|ID|OPERATOR                     |NAME |EST. ROWS|COST |
--------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN        |     |34       |83081|
|1 | TABLE SCAN                  |t1   |100      |78   |
|2 | MATERIAL                    |     |10000    |2947 |
|3 |  SUBPLAN SCAN               |VIEW1|10000    |2911 |
|4 |   NESTED-LOOP JOIN CARTESIAN|     |10000    |2736 |
|5 |    TABLE SCAN               |t2   |100      |78   |
|6 |    MATERIAL                 |     |100      |78   |
|7 |     TABLE SCAN              |t3   |100      |78   |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 > VIEW1.c2]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([VIEW1.c2]), filter(nil)
  3 - output([VIEW1.c2]), filter(nil), 
      access([VIEW1.c2])
  4 - output([t3.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)
  6 - output([t3.c2]), filter(nil)
  7 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)

***************   Case 56   ***************
SQL: select * from t1 where t1.c1 > any(select t3.c2 from t2, t3, t1 as v); 
========================================================
|ID|OPERATOR                     |NAME |EST. ROWS|COST |
--------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN        |     |34       |83081|
|1 | TABLE SCAN                  |t1   |100      |78   |
|2 | MATERIAL                    |     |10000    |2947 |
|3 |  SUBPLAN SCAN               |VIEW1|10000    |2911 |
|4 |   NESTED-LOOP JOIN CARTESIAN|     |10000    |2736 |
|5 |    TABLE SCAN               |t2   |100      |78   |
|6 |    MATERIAL                 |     |100      |78   |
|7 |     TABLE SCAN              |t3   |100      |78   |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 > VIEW1.c2]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([VIEW1.c2]), filter(nil)
  3 - output([VIEW1.c2]), filter(nil), 
      access([VIEW1.c2])
  4 - output([t3.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)
  6 - output([t3.c2]), filter(nil)
  7 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)

***************   Case 57   ***************
SQL: select t1.c1 from t1, (select * from t2) as v order by v.c1; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |78  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)
  2 - output([t1.c1]), filter(nil)
  3 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 58   ***************
SQL: select t1.c1 from t1, t2 order by t2.c1; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |78  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)
  2 - output([t1.c1]), filter(nil)
  3 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 59   ***************
SQL: select * from t1 inner join t2 on t1.c1 = t2.c1 where t1.c1 > case when t1.c1 = t2.c2 - 2 then t2.c2 else t2.c2 - 1 end; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |34       |175 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c1 > CASE WHEN t1.c1 = t2.c2 + ? THEN t2.c2 ELSE t2.c2 + ? END])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 60   ***************
SQL: select * from t1 inner join t2 on t1.c1 = t2.c1 where t1.c1 > case t2.c2 when t1.c1 = t2.c2 - 2 then t2.c2 else t2.c2 - 1 end; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |34       |175 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c1 > CASE WHEN t2.c2 = t1.c1 = t2.c2 + ? THEN t2.c2 ELSE t2.c2 + ? END])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 61   ***************
SQL: select * from t1 left join t2 on t1.c1 = t2.c1 where t1.c1 > case when t1.c1 = t2.c2 - 2 then t2.c2 else t2.c2 - 1 end; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |MERGE RIGHT OUTER JOIN|    |34       |188 |
|1 | TABLE SCAN           |t2  |100      |78  |
|2 | TABLE SCAN           |t1  |100      |78  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c1 > CASE WHEN t1.c1 = t2.c2 + ? THEN t2.c2 ELSE t2.c2 + ? END]), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 62   ***************
SQL: select * from t1 left join t2 on t1.c1 = t2.c1 where t1.c1 > case t2.c2 when t1.c1 = t2.c2 - 2 then t2.c2 else t2.c2 - 1 end; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |MERGE RIGHT OUTER JOIN|    |34       |188 |
|1 | TABLE SCAN           |t2  |100      |78  |
|2 | TABLE SCAN           |t1  |100      |78  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c1 > CASE WHEN t2.c2 = t1.c1 = t2.c2 + ? THEN t2.c2 ELSE t2.c2 + ? END]), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 63   ***************
SQL: select * from (select tt.c1 from (select t2.c1 from t2 join t1 on t1.c1 = t2.c1) tt join t2 on tt.c1 = t2.c1) as v1 join t2 on v1.c1 = t2.c1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |187 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c2], [t2.c3], [t2.c1]), filter(nil), 
      access([t2.c2], [t2.c3], [t2.c1]), partitions(p0)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 64   ***************
SQL: select tt.c1 from (select t2.c1 from t2 join t1 on t1.c1 = t2.c1) tt join t2 on tt.c1 = t2.c1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |187 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 65   ***************
SQL: SELECT * FROM t1 LEFT JOIN t2 ON t1.c1=t2.c2 WHERE (lnnvl(t1.c1=30 and t2.c2=1)); 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |HASH OUTER JOIN|    |50       |204 |
|1 | TABLE SCAN    |t1  |100      |78  |
|2 | TABLE SCAN    |t2  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([lnnvl(cast(t1.c1 = ? AND t2.c2 = ?, TINYINT(-1, 0)))]), 
      equal_conds([t1.c1 = t2.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 66   ***************
SQL: SELECT * FROM t1 LEFT JOIN t2 ON t1.c1=t2.c2 WHERE not(0+(t1.c1=30 and t2.c2=1)); 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |HASH OUTER JOIN|    |50       |204 |
|1 | TABLE SCAN    |t1  |100      |78  |
|2 | TABLE SCAN    |t2  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([(T_OP_NOT, ? + t1.c1 = ? AND t2.c2 = ?)]), 
      equal_conds([t1.c1 = t2.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 67   ***************
SQL: SELECT * FROM t1 LEFT JOIN t2 ON t1.c2<>0 WHERE t1.c1=1 AND t2.c1<=>NULL; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |NESTED-LOOP OUTER JOIN|    |0        |137 |
|1 | TABLE GET            |t1  |1        |46  |
|2 | TABLE SCAN           |t2  |100      |78  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([t2.c1 <=> ?]), 
      conds([t1.c2 != ?]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 68   ***************
SQL: SELECT * FROM t1 LEFT JOIN t2 ON t1.c1 = t2.c1 WHERE t1.c1 NOT BETWEEN t2.c2 AND t1.c2; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |MERGE RIGHT OUTER JOIN|    |50       |188 |
|1 | TABLE SCAN           |t2  |100      |78  |
|2 | TABLE SCAN           |t1  |100      |78  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([(T_OP_NOT_BTW, t1.c1, t2.c2, t1.c2)]), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 69   ***************
SQL: INSERT INTO bt1 VALUES(SUBSTR(f1, 1, 3),1); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |INSERT     |    |1        |13  |
|1 | EXPRESSION|    |1        |1   |
====================================

Outputs & filters: 
-------------------------------------
  0 - output(nil), filter(nil), 
      columns([{bt1: ({bt1: (bt1.id, bt1.f1)})}]), partitions(p0), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.id)], [column_conv(VARCHAR,utf8mb4_general_ci,length:100,NULL,__values.f1)])
  1 - output([__values.f1], [__values.id]), filter(nil)
      values({substr('test', 1, 3), ?})

***************   Case 70   ***************
SQL: select * from (select 'a' as c1 from t1 ) as t2 where  c1 > 'b'; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([?]), filter(nil), startup_filter([0]), 
      access([t1.c1]), partitions(p0)

***************   Case 71   ***************
SQL: select * from (select 1 as c1 from t1 ) as t2 where  c1 > 0; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([?]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 72   ***************
SQL: select * from (select c1, c2, c1 in (select c1+2 from t1), c1 = all(select c1 from t1) from t1) as v; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |100      |1329|
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t1  |100      |78  |
|3 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1 = ANY(subquery(1))], [t1.c1 = ALL(subquery(2))]), filter(nil), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1], [2])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c1 + ?]), filter(nil), 
      access([t1.c1]), partitions(p0)
  3 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 73   ***************
SQL: select c1, c2, c1 in (select c1+2 from t1), c1 = all(select c1 from t1) from t1; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |100      |1329|
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t1  |100      |78  |
|3 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1 = ANY(subquery(1))], [t1.c1 = ALL(subquery(2))]), filter(nil), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1], [2])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c1 + ?]), filter(nil), 
      access([t1.c1]), partitions(p0)
  3 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 74   ***************
SQL: select * from vv1; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |100      |1329|
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t1  |100      |78  |
|3 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1 = ANY(subquery(1))], [t1.c1 = ALL(subquery(2))]), filter(nil), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1], [2])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c1 + 2]), filter(nil), 
      access([t1.c1]), partitions(p0)
  3 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 75   ***************
SQL: select * from (select * from t1) as v1, (select * from t1) as v2 where v1.c1 = v2.c2; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |91       |204 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t1.c1 = t1.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 76   ***************
SQL: select * from t1 as v1, t1 as v2 where v1.c1 = v2.c2; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |91       |204 |
|1 | TABLE SCAN|v1  |100      |78  |
|2 | TABLE SCAN|v2  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([v1.c1], [v1.c2], [v2.c1], [v2.c2]), filter(nil), 
      equal_conds([v1.c1 = v2.c2]), other_conds(nil)
  1 - output([v1.c1], [v1.c2]), filter(nil), 
      access([v1.c1], [v1.c2]), partitions(p0)
  2 - output([v2.c1], [v2.c2]), filter(nil), 
      access([v2.c1], [v2.c2]), partitions(p0)

***************   Case 77   ***************
SQL: select * from (select * from t2) as v where v.c1 in (select c2 from t2); 
==========================================
|ID|OPERATOR        |NAME |EST. ROWS|COST|
------------------------------------------
|0 |NESTED-LOOP JOIN|     |10       |158 |
|1 | SUBPLAN SCAN   |VIEW2|10       |104 |
|2 |  HASH DISTINCT |     |10       |104 |
|3 |   TABLE SCAN   |t2   |100      |78  |
|4 | TABLE GET      |t2   |1        |5   |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_([VIEW2.VIEW1.c2])
  1 - output([VIEW2.VIEW1.c2]), filter(nil), 
      access([VIEW2.VIEW1.c2])
  2 - output([t2.c2]), filter(nil), 
      distinct([t2.c2])
  3 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 78   ***************
SQL: select * from t1, (select * from (select * from t2) as v where v.c1 in (select c2 from t2)) as vv; 
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |1000     |495 |
|1 | TABLE SCAN               |t1   |100      |78  |
|2 | MATERIAL                 |     |10       |159 |
|3 |  NESTED-LOOP JOIN        |     |10       |158 |
|4 |   SUBPLAN SCAN           |VIEW2|10       |104 |
|5 |    HASH DISTINCT         |     |10       |104 |
|6 |     TABLE SCAN           |t2   |100      |78  |
|7 |   TABLE GET              |t2   |1        |5   |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_([VIEW2.VIEW1.c2])
  4 - output([VIEW2.VIEW1.c2]), filter(nil), 
      access([VIEW2.VIEW1.c2])
  5 - output([t2.c2]), filter(nil), 
      distinct([t2.c2])
  6 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 79   ***************
SQL: select * from t1, (select * from (select * from t2) as v where v.c1 in (select c2 from t2)) as vv where t1.c1 in (select c2 from t2); 
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |100      |342 |
|1 | NESTED-LOOP JOIN         |     |10       |158 |
|2 |  SUBPLAN SCAN            |VIEW4|10       |104 |
|3 |   HASH DISTINCT          |     |10       |104 |
|4 |    TABLE SCAN            |t2   |100      |78  |
|5 |  TABLE GET               |t2   |1        |5   |
|6 | MATERIAL                 |     |10       |158 |
|7 |  NESTED-LOOP JOIN        |     |10       |158 |
|8 |   SUBPLAN SCAN           |VIEW3|10       |104 |
|9 |    HASH DISTINCT         |     |10       |104 |
|10|     TABLE SCAN           |t2   |100      |78  |
|11|   TABLE GET              |t1   |1        |5   |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_([VIEW4.VIEW2.c2])
  2 - output([VIEW4.VIEW2.c2]), filter(nil), 
      access([VIEW4.VIEW2.c2])
  3 - output([t2.c2]), filter(nil), 
      distinct([t2.c2])
  4 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  6 - output([t1.c1], [t1.c2]), filter(nil)
  7 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([VIEW3.VIEW1.c2])
  8 - output([VIEW3.VIEW1.c2]), filter(nil), 
      access([VIEW3.VIEW1.c2])
  9 - output([t2.c2]), filter(nil), 
      distinct([t2.c2])
  10 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  11 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 80   ***************
SQL: select * from t1, (select * from t2) as v where t1.c1 > any (select c1 from t2); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |3334     |1686|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |34       |747 |
|3 |  NESTED-LOOP SEMI JOIN   |    |34       |747 |
|4 |   TABLE SCAN             |t1  |100      |78  |
|5 |   TABLE SCAN             |t2  |1        |6   |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 81   ***************
SQL: select * from t1, t2 where t1.c1 > any (select c2 from t2); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |3334     |1903|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |34       |965 |
|3 |  NESTED-LOOP SEMI JOIN   |    |34       |965 |
|4 |   TABLE SCAN             |t1  |100      |78  |
|5 |   MATERIAL               |    |100      |78  |
|6 |    TABLE SCAN            |t2  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 > t2.c2]), nl_params_(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c2]), filter(nil)
  6 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)

***************   Case 82   ***************
SQL: select * from t1, (select * from t2) as v where exists(select c2 from t2 where t2.c1 = t1.c1); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2846|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |188 |
|3 |  MERGE JOIN              |    |100      |187 |
|4 |   TABLE SCAN             |t1  |100      |78  |
|5 |   TABLE SCAN             |t2  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t2.c1 = t1.c1]), other_conds(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 83   ***************
SQL: select * from t1, t2 where t1.c1 > exists(select c2 from t2 where t2.c1 = t1.c1); 
======================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST  |
------------------------------------------------------
|0 |SUBPLAN FILTER             |    |3334     |456814|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736  |
|2 |  TABLE SCAN               |t2  |100      |78    |
|3 |  MATERIAL                 |    |100      |79    |
|4 |   TABLE SCAN              |t1  |100      |78    |
|5 | TABLE GET                 |t2  |1        |46    |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c1 > (T_OP_EXISTS, subquery(1))]), 
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 84   ***************
SQL: select * from t1, (select * from t2) as v where exists(select c2 from t2 where t2.c1 = t1.c1); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2846|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |188 |
|3 |  MERGE JOIN              |    |100      |187 |
|4 |   TABLE SCAN             |t1  |100      |78  |
|5 |   TABLE SCAN             |t2  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t2.c1 = t1.c1]), other_conds(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 85   ***************
SQL: select * from t1, t2 where t1.c1 > exists(select c2 from t2 where t2.c1 = t1.c1); 
======================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST  |
------------------------------------------------------
|0 |SUBPLAN FILTER             |    |3334     |456814|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736  |
|2 |  TABLE SCAN               |t2  |100      |78    |
|3 |  MATERIAL                 |    |100      |79    |
|4 |   TABLE SCAN              |t1  |100      |78    |
|5 | TABLE GET                 |t2  |1        |46    |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c1 > (T_OP_EXISTS, subquery(1))]), 
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 86   ***************
SQL: select * from t1, (select * from t2) as v where exists(select c1 from t2 where t2.c1 = t1.c1); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2846|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |188 |
|3 |  MERGE JOIN              |    |100      |187 |
|4 |   TABLE SCAN             |t1  |100      |78  |
|5 |   TABLE SCAN             |t2  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t2.c1 = t1.c1]), other_conds(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 87   ***************
SQL: select * from t1, t2 where t1.c1 > exists(select c1 from t2 where t2.c1 = t1.c1); 
======================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST  |
------------------------------------------------------
|0 |SUBPLAN FILTER             |    |3334     |456814|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736  |
|2 |  TABLE SCAN               |t2  |100      |78    |
|3 |  MATERIAL                 |    |100      |79    |
|4 |   TABLE SCAN              |t1  |100      |78    |
|5 | TABLE GET                 |t2  |1        |46    |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c1 > (T_OP_EXISTS, subquery(1))]), 
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 88   ***************
SQL: select * from t1, t2 where not exists(select c1 from t3 where c1 > 5 group by c1); 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SUBPLAN FILTER             |    |10000    |2957|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|2 |  TABLE SCAN               |t2  |100      |78  |
|3 |  MATERIAL                 |    |100      |79  |
|4 |   TABLE SCAN              |t1  |100      |78  |
|5 | TABLE SCAN                |t3  |1        |46  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), startup_filter([?]), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([1]), filter(nil), 
      access([t3.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 89   ***************
SQL: select * from (select * from t1 where c1 + c2 in (select c2 from t3) and not exists(select c1 from t2 where c1 > 5 group by c1)) as v where v.c1 in (select c3 from t2); 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |1        |353 |
|1 | HASH SEMI JOIN |    |1        |307 |
|2 |  HASH SEMI JOIN|    |1        |205 |
|3 |   TABLE SCAN   |t1  |100      |78  |
|4 |   TABLE SCAN   |t2  |100      |78  |
|5 |  TABLE SCAN    |t3  |100      |78  |
|6 | TABLE SCAN     |t2  |1        |46  |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), 
      equal_conds([t1.c1 + t1.c2 = t3.c2]), other_conds(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      equal_conds([cast(t1.c1, DECIMAL(11, 0)) = cast(t2.c3, DECIMAL(-1, -1))]), other_conds(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c3]), filter(nil), 
      access([t2.c3]), partitions(p0)
  5 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  6 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 90   ***************
SQL: select * from t1 where c1 + c2 in (select c2 from t3) and not exists(select c1 from t2 where c1 > 5 group by c1); 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SUBPLAN FILTER       |    |9        |252 |
|1 | HASH RIGHT SEMI JOIN|    |9        |206 |
|2 |  TABLE SCAN         |t3  |100      |78  |
|3 |  TABLE SCAN         |t1  |100      |78  |
|4 | TABLE SCAN          |t2  |1        |46  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), 
      equal_conds([t1.c1 + t1.c2 = t3.c2]), other_conds(nil)
  2 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 91   ***************
SQL: select * from (select k * 2 as mm from (select c1 + c2 as k from t1 where c2 > 0) as v inner join t1 on v.k = t1.c1  where k < 10) as vvv where mm = 9; 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |1        |81  |
|1 | TABLE SCAN     |t1  |1        |81  |
|2 | TABLE GET      |t1  |1        |5   |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1 + t1.c2 * ?]), filter(nil), 
      conds(nil), nl_params_([t1.c1 + t1.c2])
  1 - output([t1.c1 + t1.c2], [t1.c1 + t1.c2 * ?]), filter([t1.c1 + t1.c2 * ? = ?], [t1.c1 + t1.c2 < ?], [t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(nil), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 92   ***************
SQL: select t1.c1 + t1.c2 * 2 from t1, t1 as v1 where t1.c1 + t1.c2  = v1.c1 and t1.c1 + t1.c2 < 10 and t1.c1 + t1.c2 * 2 = 9; 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |1        |82  |
|1 | TABLE SCAN     |t1  |1        |81  |
|2 | TABLE GET      |v1  |1        |5   |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1 + t1.c2 * ?]), filter(nil), 
      conds(nil), nl_params_([t1.c1 + t1.c2])
  1 - output([t1.c1], [t1.c2]), filter([t1.c1 + t1.c2 * ? = ?], [t1.c1 + t1.c2 < ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(nil), filter(nil), 
      access([v1.c1]), partitions(p0)

***************   Case 93   ***************
SQL: select * from ( select c1 as b from t1) as t2 order by b; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 94   ***************
SQL: select * from t1 order by c1; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 95   ***************
SQL: select max(k) from (select c1 * c2 as k from t2 where c2 in (select c2 from t3)) as v; 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SCALAR GROUP BY      |    |1        |227 |
|1 | HASH RIGHT SEMI JOIN|    |90       |224 |
|2 |  TABLE SCAN         |t3  |100      |78  |
|3 |  TABLE SCAN         |t2  |100      |78  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(t2.c1 * t2.c2)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(t2.c1 * t2.c2)])
  1 - output([t2.c2], [t2.c1]), filter(nil), 
      equal_conds([t2.c2 = t3.c2]), other_conds(nil)
  2 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2]), filter(nil), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 96   ***************
SQL: select max(c1 * c2) from t2 where c2 in (select c2 from t3); 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SCALAR GROUP BY      |    |1        |227 |
|1 | HASH RIGHT SEMI JOIN|    |90       |224 |
|2 |  TABLE SCAN         |t3  |100      |78  |
|3 |  TABLE SCAN         |t2  |100      |78  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(t2.c1 * t2.c2)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(t2.c1 * t2.c2)])
  1 - output([t2.c2], [t2.c1]), filter(nil), 
      equal_conds([t2.c2 = t3.c2]), other_conds(nil)
  2 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2]), filter(nil), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 97   ***************
SQL: select * from t1, (select * from t3 where c2 > 0) as v1 where v1.c1 in (select c1 from t2); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2586|
|1 | MERGE JOIN               |    |90       |186 |
|2 |  TABLE SCAN              |t3  |90       |79  |
|3 |  TABLE SCAN              |t2  |100      |78  |
|4 | MATERIAL                 |    |100      |79  |
|5 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t3.c1 = t2.c1]), other_conds(nil)
  2 - output([t3.c1], [t3.c2], [t3.c3]), filter([t3.c2 > ?]), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil)
  5 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 98   ***************
SQL: select * from t1, t3 where t3.c1 in (select c1 from t2); 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2846|
|1 | MERGE JOIN               |    |100      |187 |
|2 |  TABLE SCAN              |t3  |100      |78  |
|3 |  TABLE SCAN              |t2  |100      |78  |
|4 | MATERIAL                 |    |100      |79  |
|5 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t3.c1 = t2.c1]), other_conds(nil)
  2 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  3 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil)
  5 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 99   ***************
SQL: select * from t1, (select * from t1) as v where t1.c1>v.c1; 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |3334     |1391|
|1 | TABLE SCAN     |t1  |100      |78  |
|2 | TABLE SCAN     |t1  |34       |5   |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 100   ***************
SQL: select * from t1, t1 as v where t1.c1 > v.c1; 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |3334     |1391|
|1 | TABLE SCAN     |t1  |100      |78  |
|2 | TABLE SCAN     |v   |34       |5   |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.c1], [v.c2]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([v.c1], [v.c2]), filter(nil), 
      access([v.c1], [v.c2]), partitions(p0)

***************   Case 101   ***************
SQL: select * from (select * from t1 where c1 >all(select c2 from t2)) as v; 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |NESTED-LOOP ANTI JOIN|    |60       |966 |
|1 | TABLE SCAN          |t1  |100      |78  |
|2 | MATERIAL            |    |100      |78  |
|3 |  TABLE SCAN         |t2  |100      |78  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 <= t2.c2 OR (T_OP_IS, t2.c2, NULL, 0)]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c2]), filter(nil)
  3 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)

***************   Case 102   ***************
SQL: select * from t1 where c1 >all(select c2 from t2); 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |NESTED-LOOP ANTI JOIN|    |60       |966 |
|1 | TABLE SCAN          |t1  |100      |78  |
|2 | MATERIAL            |    |100      |78  |
|3 |  TABLE SCAN         |t2  |100      |78  |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 <= t2.c2 OR (T_OP_IS, t2.c2, NULL, 0)]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c2]), filter(nil)
  3 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)

***************   Case 103   ***************
SQL: select * from t1 order by c1 desc, c1; 
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 104   ***************
SQL: select * from t1 order by c1 desc; 
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 105   ***************
SQL: select * from t1 order by c1 desc, c1 asc; 
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 106   ***************
SQL: select * from t1 order by c1 asc; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 107   ***************
SQL: select * from t1 order by c1 desc, c2, c1; 
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 108   ***************
SQL: select * from t1 order by c1 desc, c2; 
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 109   ***************
SQL: select * from t1, (select * from t1 as v) as vv; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t1  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |v   |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.c1], [v.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([v.c1], [v.c2]), filter(nil)
  3 - output([v.c1], [v.c2]), filter(nil), 
      access([v.c1], [v.c2]), partitions(p0)

***************   Case 110   ***************
SQL: select * from t1, t1 as v; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t1  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |v   |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.c1], [v.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([v.c1], [v.c2]), filter(nil)
  3 - output([v.c1], [v.c2]), filter(nil), 
      access([v.c1], [v.c2]), partitions(p0)

***************   Case 111   ***************
SQL: select * from t1, t1 as v inner join t2 on v.c1 = t2.c1; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2846|
|1 | MERGE JOIN               |    |100      |188 |
|2 |  TABLE SCAN              |t2  |100      |78  |
|3 |  TABLE SCAN              |v   |100      |78  |
|4 | MATERIAL                 |    |100      |79  |
|5 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.c1], [v.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([v.c1], [v.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([v.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v.c1], [v.c2]), filter(nil), 
      access([v.c1], [v.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil)
  5 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 112   ***************
SQL: select * from t1, t1 as v, t2 where v.c1 = t2.c1; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2846|
|1 | MERGE JOIN               |    |100      |188 |
|2 |  TABLE SCAN              |t2  |100      |78  |
|3 |  TABLE SCAN              |v   |100      |78  |
|4 | MATERIAL                 |    |100      |79  |
|5 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.c1], [v.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([v.c1], [v.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([v.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v.c1], [v.c2]), filter(nil), 
      access([v.c1], [v.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil)
  5 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 113   ***************
SQL: select * from t1, (select * from t1 ) as v1; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t1  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 114   ***************
SQL: select * from t1, t1 as v1; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t1  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |v1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v1.c1], [v1.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([v1.c1], [v1.c2]), filter(nil)
  3 - output([v1.c1], [v1.c2]), filter(nil), 
      access([v1.c1], [v1.c2]), partitions(p0)

***************   Case 115   ***************
SQL: select * from t1, t2, t1 as v1, t2 as v2; 
=========================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST    |
---------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN  |    |100000000|26044431|
|1 | NESTED-LOOP JOIN CARTESIAN |    |1000000  |260653  |
|2 |  NESTED-LOOP JOIN CARTESIAN|    |10000    |2736    |
|3 |   TABLE SCAN               |t2  |100      |78      |
|4 |   MATERIAL                 |    |100      |79      |
|5 |    TABLE SCAN              |t1  |100      |78      |
|6 |  MATERIAL                  |    |100      |79      |
|7 |   TABLE SCAN               |v1  |100      |78      |
|8 | MATERIAL                   |    |100      |80      |
|9 |  TABLE SCAN                |v2  |100      |78      |
=========================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [v1.c1], [v1.c2], [v2.c1], [v2.c2], [v2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [v1.c1], [v1.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil)
  5 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  6 - output([v1.c1], [v1.c2]), filter(nil)
  7 - output([v1.c1], [v1.c2]), filter(nil), 
      access([v1.c1], [v1.c2]), partitions(p0)
  8 - output([v2.c1], [v2.c2], [v2.c3]), filter(nil)
  9 - output([v2.c1], [v2.c2], [v2.c3]), filter(nil), 
      access([v2.c1], [v2.c2], [v2.c3]), partitions(p0)

***************   Case 116   ***************
SQL: select * from t1 join (select * from t2) as v on t1.c1 = v.c1 left join t3 on t1.c1 = t3.c1 where t3.c2 is not null; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |MERGE JOIN  |    |90       |295 |
|1 | MERGE JOIN |    |90       |188 |
|2 |  TABLE SCAN|t2  |100      |78  |
|3 |  TABLE SCAN|t3  |90       |80  |
|4 | TABLE SCAN |t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t3.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t3.c1], [t3.c2], [t3.c3]), filter([(T_OP_IS_NOT, t3.c2, NULL, 0)]), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 117   ***************
SQL: select * from t1, t2, t3 where t1.c1 = t2.c1 and t1.c1 = t3.c1 and t3.c2 is not null; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |MERGE JOIN  |    |90       |296 |
|1 | MERGE JOIN |    |90       |188 |
|2 |  TABLE SCAN|t2  |100      |78  |
|3 |  TABLE SCAN|t3  |90       |80  |
|4 | TABLE SCAN |t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t3.c1], [t3.c2], [t3.c3]), filter([(T_OP_IS_NOT, t3.c2, NULL, 0)]), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 118   ***************
SQL: select * from t1 left join t2 on t1.c1 = t2.c1 left join t3 on t1.c2 = t3.c2 where t3.c1 is not null and t2.c3 is not null; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |HASH JOIN   |    |729      |315 |
|1 | TABLE SCAN |t3  |100      |78  |
|2 | MERGE JOIN |    |90       |191 |
|3 |  TABLE SCAN|t2  |90       |84  |
|4 |  TABLE SCAN|t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c2 = t3.c2]), other_conds(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  3 - output([t2.c1], [t2.c3], [t2.c2]), filter([(T_OP_IS_NOT, t2.c3, NULL, 0)]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 119   ***************
SQL: select * from t1, t2, t3 where t3.c1 is not null and t1.c2 = t3.c2 and t2.c3 is not null; 
====================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST |
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |72900    |19088|
|1 | HASH JOIN                |    |810      |204  |
|2 |  TABLE SCAN              |t1  |100      |78   |
|3 |  TABLE SCAN              |t3  |100      |78   |
|4 | MATERIAL                 |    |90       |86   |
|5 |  TABLE SCAN              |t2  |90       |84   |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c2 = t3.c2]), other_conds(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil)
  5 - output([t2.c1], [t2.c3], [t2.c2]), filter([(T_OP_IS_NOT, t2.c3, NULL, 0)]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 120   ***************
SQL: select * from t1 left join t2 on t1.c1 = t2.c1 left join t3 on t1.c2 = t3.c2 where t3.c1 is not null; 
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH JOIN              |    |810      |315 |
|1 | TABLE SCAN            |t3  |100      |78  |
|2 | MERGE RIGHT OUTER JOIN|    |100      |188 |
|3 |  TABLE SCAN           |t2  |100      |78  |
|4 |  TABLE SCAN           |t1  |100      |78  |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c2 = t3.c2]), other_conds(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 121   ***************
SQL: select * from t1 left join t2 on t1.c1 = t2.c1, t3 where t3.c1 is not null and t1.c2 = t3.c2; 
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH JOIN              |    |810      |315 |
|1 | TABLE SCAN            |t3  |100      |78  |
|2 | MERGE RIGHT OUTER JOIN|    |100      |188 |
|3 |  TABLE SCAN           |t2  |100      |78  |
|4 |  TABLE SCAN           |t1  |100      |78  |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t1.c2 = t3.c2]), other_conds(nil)
  1 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 122   ***************
SQL: select * from t1 join t2 on t1.c1 = t2.c1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |188 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 123   ***************
SQL: select * from t1, t2 where t1.c1 = t2.c1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |188 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 124   ***************
SQL: select * from t1 join t2 on t1.c1 = t2.c1 join t3 on t2.c1 = t3.c1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |MERGE JOIN  |    |100      |299 |
|1 | MERGE JOIN |    |100      |188 |
|2 |  TABLE SCAN|t2  |100      |78  |
|3 |  TABLE SCAN|t1  |100      |78  |
|4 | TABLE SCAN |t3  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)

***************   Case 125   ***************
SQL: select * from t1, t2, t3 where t1.c1 = t2.c1 and t2.c1 = t3.c1; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |MERGE JOIN  |    |100      |299 |
|1 | MERGE JOIN |    |100      |188 |
|2 |  TABLE SCAN|t2  |100      |78  |
|3 |  TABLE SCAN|t1  |100      |78  |
|4 | TABLE SCAN |t3  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)

***************   Case 126   ***************
SQL: select * from t1 left join t2 on t1.c1 = t2.c1 where t2.c1 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |188 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 127   ***************
SQL: select * from t1, t2 where t2.c1 is not null and t1.c1 = t2.c1; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |188 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 128   ***************
SQL: select * from t1 left join t2 on t1.c1>1 where t2.c1 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 129   ***************
SQL: select * from t1, t2 where t1.c1 > 1 and t2.c1 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 130   ***************
SQL: select t1.c1 from t1 left join t2 on t1.c1 = t2.c1 and t1.c2 = t2.c2 where t2.c2 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |82       |185 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |90       |80  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      equal_conds([t1.c1 = t2.c1], [t1.c2 = t2.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 131   ***************
SQL: select t1.c1 from t1, t2 where t1.c1 = t2.c1 and t1.c2 = t2.c2 and t2.c2 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |82       |185 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |90       |80  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      equal_conds([t1.c1 = t2.c1], [t1.c2 = t2.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 132   ***************
SQL: select * from t1 inner join t2 on t1.c1>1 where t2.c3 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2484|
|1 | TABLE SCAN               |t2  |90       |84  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c3], [t2.c2]), filter([(T_OP_IS_NOT, t2.c3, NULL, 0)]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 133   ***************
SQL: select * from t1, t2 where t1.c1 > 1 and t2.c3 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2484|
|1 | TABLE SCAN               |t2  |90       |84  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c3], [t2.c2]), filter([(T_OP_IS_NOT, t2.c3, NULL, 0)]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 134   ***************
SQL: select * from t1 inner join t2 on t1.c1>1 where t2.c2 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2481|
|1 | TABLE SCAN               |t2  |90       |80  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 135   ***************
SQL: select * from t1, t2 where t1.c1 > 1 and t2.c2 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2481|
|1 | TABLE SCAN               |t2  |90       |80  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 136   ***************
SQL: select * from t1 inner join t2 on t1.c1 = t2.c1 where t2.c1 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |188 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 137   ***************
SQL: select * from t1, t2 where t1.c1=t2.c1 and t2.c1 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |188 |
|1 | TABLE SCAN|t2  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 138   ***************
SQL: select t1.c1 from t1 inner join t2 on t1.c1 = t2.c1 and t1.c2 = t2.c2 where t2.c2 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |82       |185 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |90       |80  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      equal_conds([t1.c1 = t2.c1], [t1.c2 = t2.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 139   ***************
SQL: select t1.c1 from t1, t2 where t1.c1=t2.c1 and t1.c2=t2.c2 and t2.c2 is not null; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |82       |185 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |90       |80  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      equal_conds([t1.c1 = t2.c1], [t1.c2 = t2.c2]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2]), partitions(p0)

***************   Case 140   ***************
SQL: select * from t1 inner join t2 on t1.c1>1 where t2.c1 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 141   ***************
SQL: select * from t1, t2 where t1.c1 > 1 and t2.c1 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|1 | TABLE SCAN               |t2  |100      |78  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 142   ***************
SQL: select * from t1 inner join t2 on t1.c1>1 where t2.c2 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2481|
|1 | TABLE SCAN               |t2  |90       |80  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 143   ***************
SQL: select * from t1, t2 where t1.c1 > 1 and t2.c2 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2481|
|1 | TABLE SCAN               |t2  |90       |80  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([(T_OP_IS_NOT, t2.c2, NULL, 0)]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 144   ***************
SQL: select * from t1 inner join t2 on t1.c1>1 where t2.c3 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2484|
|1 | TABLE SCAN               |t2  |90       |84  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c3], [t2.c2]), filter([(T_OP_IS_NOT, t2.c3, NULL, 0)]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 145   ***************
SQL: select * from t1, t2 where t1.c1 > 1 and t2.c3 is not null; 
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |9000     |2484|
|1 | TABLE SCAN               |t2  |90       |84  |
|2 | MATERIAL                 |    |100      |79  |
|3 |  TABLE SCAN              |t1  |100      |78  |
===================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c3], [t2.c2]), filter([(T_OP_IS_NOT, t2.c3, NULL, 0)]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 146   ***************
SQL: select * from t1 where Exists (select c1 from t2); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |100      |125 |
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 147   ***************
SQL: select * from t1 where c1 In (select c1 from t2); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |187 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 148   ***************
SQL: select * from t1 where c1 =ANY (select c1 from t2); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |MERGE JOIN |    |100      |187 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t2  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 149   ***************
SQL: select * from t1 where c1 >ANY (select c1 from t2); 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |NESTED-LOOP SEMI JOIN|    |34       |747 |
|1 | TABLE SCAN          |t1  |100      |78  |
|2 | TABLE SCAN          |t2  |1        |6   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 150   ***************
SQL: select * from t1 where c1 <ALL (select c1 from t2); 
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |NESTED-LOOP ANTI JOIN|    |67       |747 |
|1 | TABLE SCAN          |t1  |100      |78  |
|2 | TABLE SCAN          |t2  |1        |6   |
==============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 151   ***************
SQL: select * from t1 where c1 <ALL (select c1 from t2 limit 1); 
===============================================
|ID|OPERATOR             |NAME |EST. ROWS|COST|
-----------------------------------------------
|0 |NESTED-LOOP ANTI JOIN|     |67       |140 |
|1 | TABLE SCAN          |t1   |100      |78  |
|2 | MATERIAL            |     |1        |46  |
|3 |  SUBPLAN SCAN       |VIEW1|1        |46  |
|4 |   TABLE SCAN        |t2   |1        |46  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds([t1.c1 >= VIEW1.c1]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([VIEW1.c1]), filter(nil)
  3 - output([VIEW1.c1]), filter(nil), 
      access([VIEW1.c1])
  4 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 152   ***************
SQL: select * from t1 where 1 < ANY(select c1 from t2); 
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |100      |151 |
|1 | TABLE SCAN               |t1   |100      |78  |
|2 | MATERIAL                 |     |1        |46  |
|3 |  SUBPLAN SCAN            |VIEW1|1        |46  |
|4 |   TABLE SCAN             |t2   |1        |46  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(nil), filter(nil)
  3 - output(nil), filter(nil), 
      access(nil)
  4 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 153   ***************
SQL: select * from t1 where 1 < ANY(select c1 from t2 limit 1); 
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |10       |128 |
|1 | TABLE SCAN               |t1   |100      |78  |
|2 | MATERIAL                 |     |1        |46  |
|3 |  SUBPLAN SCAN            |VIEW3|1        |46  |
|4 |   LIMIT                  |     |1        |46  |
|5 |    SUBPLAN SCAN          |VIEW2|1        |46  |
|6 |     TABLE SCAN           |t2   |1        |46  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(nil), filter(nil)
  3 - output(nil), filter(nil), 
      access(nil)
  4 - output([1]), filter(nil), limit(1), offset(nil)
  5 - output(nil), filter([VIEW2.c1 > ?]), 
      access([VIEW2.c1])
  6 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 154   ***************
SQL: select * from t1 where Exists (select c1 from t2 where c2 >ALL (select c1 from t3)); 
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |SUBPLAN FILTER         |    |100      |216 |
|1 | TABLE SCAN            |t1  |100      |78  |
|2 | LIMIT                 |    |1        |137 |
|3 |  NESTED-LOOP ANTI JOIN|    |1        |137 |
|4 |   TABLE SCAN          |t2  |2        |46  |
|5 |   MATERIAL            |    |100      |78  |
|6 |    TABLE SCAN         |t3  |100      |78  |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([1]), filter(nil), limit(1), offset(nil)
  3 - output(nil), filter(nil), 
      conds([t2.c2 <= t3.c1 OR (T_OP_IS, t2.c2, NULL, 0)]), nl_params_(nil)
  4 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  5 - output([t3.c1]), filter(nil)
  6 - output([t3.c1]), filter(nil), 
      access([t3.c1]), partitions(p0)

***************   Case 155   ***************
SQL: select alias from (select c1 as alias, c2 from t1) a where alias in (select c1 from t1); 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 156   ***************
SQL: select alias from (select lnnvl(c1) as alias, c2 from t1) a where alias in (select c1 from t1); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |100      |204 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([lnnvl(cast(t1.c1, TINYINT(-1, 0)))]), filter(nil), 
      equal_conds([lnnvl(cast(t1.c1, TINYINT(-1, 0))) = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 157   ***************
SQL: select alias from (select floor(c1 + c2) as alias, c2 from t1) a where alias in (select c1 from t1); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |100      |204 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([floor(t1.c1 + t1.c2)]), filter(nil), 
      equal_conds([floor(t1.c1 + t1.c2) = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 158   ***************
SQL: select alias from (select floor(c1+c2) as alias, c2 from t1 where c2 > (select 1) ) a where alias in (select c1 from t1); 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |HASH JOIN  |    |86       |202 |
|1 | TABLE SCAN|t1  |100      |78  |
|2 | TABLE SCAN|t1  |86       |79  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([floor(t1.c1 + t1.c2)]), filter(nil), 
      equal_conds([floor(t1.c1 + t1.c2) = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), 
      access([t1.c1]), partitions(p0)
  2 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 159   ***************
SQL: select /*+ NO_REWRITE */ * from (select * from t1) as v; 
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |SUBPLAN SCAN|v   |100      |80  |
|1 | TABLE SCAN |t1  |100      |78  |
=====================================

Outputs & filters: 
-------------------------------------
  0 - output([v.c1], [v.c2]), filter(nil), 
      access([v.c1], [v.c2])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 160   ***************
SQL: select /*+ NO_REWRITE*/ * from t1 where c1 In (select c1 from t2); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |50       |704 |
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t2  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), 
      access([t2.c1]), partitions(p0)

***************   Case 161   ***************
SQL: select * from part_view where part_view.k1 > 1; 
====================================================
|ID|OPERATOR               |NAME    |EST. ROWS|COST|
----------------------------------------------------
|0 |PX COORDINATOR         |        |475      |520 |
|1 | EXCHANGE OUT DISTR    |:EX10000|475      |476 |
|2 |  PX PARTITION ITERATOR|        |475      |387 |
|3 |   TABLE SCAN          |dist_t  |475      |387 |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([INTERNAL_FUNCTION(dist_t.c1, dist_t.c2)]), filter(nil)
  1 - output([INTERNAL_FUNCTION(dist_t.c1, dist_t.c2)]), filter(nil), dop=1
  2 - output([dist_t.c1], [dist_t.c2]), filter(nil)
  3 - output([dist_t.c1], [dist_t.c2]), filter(nil), 
      access([dist_t.c1], [dist_t.c2]), partitions(p[0-4])

***************   Case 162   ***************
SQL: select * from part_view where part_view.k1 + 1 > 1; 
====================================================
|ID|OPERATOR               |NAME    |EST. ROWS|COST|
----------------------------------------------------
|0 |PX COORDINATOR         |        |167      |447 |
|1 | EXCHANGE OUT DISTR    |:EX10000|167      |431 |
|2 |  PX PARTITION ITERATOR|        |167      |400 |
|3 |   TABLE SCAN          |dist_t  |167      |400 |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([INTERNAL_FUNCTION(dist_t.c1, dist_t.c2)]), filter(nil)
  1 - output([INTERNAL_FUNCTION(dist_t.c1, dist_t.c2)]), filter(nil), dop=1
  2 - output([dist_t.c1], [dist_t.c2]), filter(nil)
  3 - output([dist_t.c1], [dist_t.c2]), filter([dist_t.c1 + ? > ?]), 
      access([dist_t.c1], [dist_t.c2]), partitions(p[0-4])

***************   Case 163   ***************
SQL: select k1 as newk from part_view where k1 > 0; 
====================================================
|ID|OPERATOR               |NAME    |EST. ROWS|COST|
----------------------------------------------------
|0 |PX COORDINATOR         |        |500      |466 |
|1 | EXCHANGE OUT DISTR    |:EX10000|500      |439 |
|2 |  PX PARTITION ITERATOR|        |500      |387 |
|3 |   TABLE SCAN          |dist_t  |500      |387 |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([INTERNAL_FUNCTION(dist_t.c1)]), filter(nil)
  1 - output([INTERNAL_FUNCTION(dist_t.c1)]), filter(nil), dop=1
  2 - output([dist_t.c1]), filter(nil)
  3 - output([dist_t.c1]), filter(nil), 
      access([dist_t.c1]), partitions(p[0-4])

***************   Case 164   ***************
SQL: select k1 as newk from part_view where k1=2; 
===============================================
|ID|OPERATOR            |NAME  |EST. ROWS|COST|
-----------------------------------------------
|0 |EXCHANGE IN REMOTE  |      |1        |46  |
|1 | EXCHANGE OUT REMOTE|      |1        |46  |
|2 |  TABLE GET         |dist_t|1        |46  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([dist_t.c1]), filter(nil)
  1 - output([dist_t.c1]), filter(nil)
  2 - output([dist_t.c1]), filter(nil), 
      access([dist_t.c1]), partitions(p2)

***************   Case 165   ***************
SQL: select k1 as newk from part_view where k1=3; 
===============================================
|ID|OPERATOR            |NAME  |EST. ROWS|COST|
-----------------------------------------------
|0 |EXCHANGE IN REMOTE  |      |1        |46  |
|1 | EXCHANGE OUT REMOTE|      |1        |46  |
|2 |  TABLE GET         |dist_t|1        |46  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([dist_t.c1]), filter(nil)
  1 - output([dist_t.c1]), filter(nil)
  2 - output([dist_t.c1]), filter(nil), 
      access([dist_t.c1]), partitions(p3)

***************   Case 166   ***************
SQL: select nn as newk from (select k1 as nn from part_view) as tv where nn=3; 
===============================================
|ID|OPERATOR            |NAME  |EST. ROWS|COST|
-----------------------------------------------
|0 |EXCHANGE IN REMOTE  |      |1        |46  |
|1 | EXCHANGE OUT REMOTE|      |1        |46  |
|2 |  TABLE GET         |dist_t|1        |46  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([dist_t.c1]), filter(nil)
  1 - output([dist_t.c1]), filter(nil)
  2 - output([dist_t.c1]), filter(nil), 
      access([dist_t.c1]), partitions(p3)

***************   Case 167   ***************
SQL: select nn as newk from (select k1 as nn from part_view) as tv where exists(select c1 from t2 where t2.c1 = nn) and nn = 2; 
=================================================
|ID|OPERATOR            |NAME    |EST. ROWS|COST|
-------------------------------------------------
|0 |SUBPLAN FILTER      |        |1        |91  |
|1 | PX COORDINATOR     |        |1        |46  |
|2 |  EXCHANGE OUT DISTR|:EX10000|1        |46  |
|3 |   TABLE GET        |dist_t  |1        |46  |
|4 | TABLE GET          |t2      |1        |46  |
=================================================

Outputs & filters: 
-------------------------------------
  0 - output([dist_t.c1]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([dist_t.c1]), filter(nil)
  2 - output([dist_t.c1]), filter(nil), is_single, dop=1
  3 - output([dist_t.c1]), filter(nil), startup_filter([?]), 
      access([dist_t.c1]), partitions(p2)
  4 - output([1]), filter(nil), 
      access([t2.c1]), partitions(p0), 
      limit(1), offset(nil)

***************   Case 168   ***************
SQL: select * from part_view as v1, part_view as v2 where v1.k1 = 1 and v2.k1 = 2; 
=======================================================
|ID|OPERATOR                  |NAME    |EST. ROWS|COST|
-------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|        |1        |142 |
|1 | PX COORDINATOR           |        |1        |46  |
|2 |  EXCHANGE OUT DISTR      |:EX10000|1        |46  |
|3 |   TABLE GET              |dist_t  |1        |46  |
|4 | PX COORDINATOR           |        |1        |46  |
|5 |  EXCHANGE OUT DISTR      |:EX20000|1        |46  |
|6 |   TABLE GET              |dist_t  |1        |46  |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([dist_t.c1], [dist_t.c2], [dist_t.c1], [dist_t.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([dist_t.c1], [dist_t.c2]), filter(nil)
  2 - output([dist_t.c1], [dist_t.c2]), filter(nil), is_single, dop=1
  3 - output([dist_t.c1], [dist_t.c2]), filter(nil), 
      access([dist_t.c1], [dist_t.c2]), partitions(p1)
  4 - output([dist_t.c1], [dist_t.c2]), filter(nil)
  5 - output([dist_t.c1], [dist_t.c2]), filter(nil), is_single, dop=1
  6 - output([dist_t.c1], [dist_t.c2]), filter(nil), 
      access([dist_t.c1], [dist_t.c2]), partitions(p2)

***************   Case 169   ***************
SQL: select * from (select * from part_view) as v1, (select * from part_view) as v2 where v1.k1 = 1 and v2.k1 = 2; 
=======================================================
|ID|OPERATOR                  |NAME    |EST. ROWS|COST|
-------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|        |1        |142 |
|1 | PX COORDINATOR           |        |1        |46  |
|2 |  EXCHANGE OUT DISTR      |:EX10000|1        |46  |
|3 |   TABLE GET              |dist_t  |1        |46  |
|4 | PX COORDINATOR           |        |1        |46  |
|5 |  EXCHANGE OUT DISTR      |:EX20000|1        |46  |
|6 |   TABLE GET              |dist_t  |1        |46  |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([dist_t.c1], [dist_t.c2], [dist_t.c1], [dist_t.c2]), filter(nil), 
      conds(nil), nl_params_(nil)
  1 - output([dist_t.c1], [dist_t.c2]), filter(nil)
  2 - output([dist_t.c1], [dist_t.c2]), filter(nil), is_single, dop=1
  3 - output([dist_t.c1], [dist_t.c2]), filter(nil), 
      access([dist_t.c1], [dist_t.c2]), partitions(p1)
  4 - output([dist_t.c1], [dist_t.c2]), filter(nil)
  5 - output([dist_t.c1], [dist_t.c2]), filter(nil), is_single, dop=1
  6 - output([dist_t.c1], [dist_t.c2]), filter(nil), 
      access([dist_t.c1], [dist_t.c2]), partitions(p2)

***************   Case 170   ***************
SQL: select * from t1 where c2="1" order by c2; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |0        |79  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([cast(t1.c2, DECIMAL(11, 0)) = ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 171   ***************
SQL: select /*+leading(t1, t2) use_nl(t1, t2)*/ * from t1,t2 where t1.c2=t2.c2 order by t1.c2, t2.c2; 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SORT             |    |810      |1787|
|1 | NESTED-LOOP JOIN|    |810      |1124|
|2 |  TABLE SCAN     |t1  |100      |78  |
|3 |  MATERIAL       |    |100      |80  |
|4 |   TABLE SCAN    |t2  |100      |78  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t2.c3]), filter(nil), sort_keys([t1.c2, ASC])
  1 - output([t1.c2], [t1.c1], [t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      conds([t1.c2 = t2.c2]), nl_params_(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil)
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 172   ***************
SQL: select * from t2 where c3 = 'abc'; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |2        |84  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c3 = ?]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 173   ***************
SQL: select c2 from t2 where c3 = 'abc' group by c2, c3 order by c3, c2; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |2        |84  |
|1 | SORT         |    |2        |84  |
|2 |  TABLE SCAN  |t2  |2        |84  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter(nil), 
      group([t2.c2]), agg_func(nil)
  1 - output([t2.c2]), filter(nil), sort_keys([t2.c2, ASC])
  2 - output([t2.c2]), filter([t2.c3 = ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 174   ***************
SQL: select c2 from t2 where c3 = 'abc' group by c2, c3 order by c3, c2, c3, c3 desc; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |2        |84  |
|1 | SORT         |    |2        |84  |
|2 |  TABLE SCAN  |t2  |2        |84  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter(nil), 
      group([t2.c2]), agg_func(nil)
  1 - output([t2.c2]), filter(nil), sort_keys([t2.c2, ASC])
  2 - output([t2.c2]), filter([t2.c3 = ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 175   ***************
SQL: select c2 from t2 where c3 = 'abc' and c1 = 4 group by c2, c3 order by c3, c2; 
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter([t2.c3 = ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 176   ***************
SQL: select c2 from t2 where c3 = 'abc' and c1 = 4 and c2 = 5 and c2 = 6 and c2 = 7 group by c2, c3 order by c3, c2; 
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter([t2.c3 = ?], [t2.c2 = ?], [t2.c2 = ?], [t2.c2 = ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 177   ***************
SQL: select c1,c2,c3,c2+1 from t2 where c3 = 'abc' and c1 = 4 and c2 = 5 and c2 = 6 and c2 = 7 group by c2, c3 order by c3, c2; 
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [?]), filter([t2.c3 = ?], [t2.c2 = ?], [t2.c2 = ?], [t2.c2 = ?]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 178   ***************
SQL: select c2 from t2 where c3 = 'abc' and (c1 = 4 or c3 = 'abc') group by c2, c3 order by c3, c2; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |84  |
|1 | SORT         |    |1        |84  |
|2 |  TABLE SCAN  |t2  |1        |84  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter(nil), 
      group([t2.c2]), agg_func(nil)
  1 - output([t2.c2]), filter(nil), sort_keys([t2.c2, ASC])
  2 - output([t2.c2]), filter([t2.c3 = ?], [t2.c1 = ? OR t2.c3 = ?]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 179   ***************
SQL: select c2 from t2 where c3 = 'abc' and c1 = 4 group by c2, c3 having count(c2) > 0 order by c3, c2; 
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter([t2.c3 = ?], [CASE WHEN (T_OP_IS_NOT, t2.c2, NULL, 0) THEN 1 ELSE 0 END > ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 180   ***************
SQL: select c2 from t2 where c3 = 'abc' and c1 = 4 group by c2, c3 having c2 > 0 order by c3, c2; 
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter([t2.c3 = ?], [t2.c2 > ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 181   ***************
SQL: select c2 from t2 where c3 = 'abc' and c1 = 4 group by c2+1, c3 order by c3+1, c2; 
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter([t2.c3 = ?]), 
      access([t2.c3], [t2.c2]), partitions(p0)

***************   Case 182   ***************
SQL: select c2 from t2 where c3 = 'abc' and c1 = 4 or c2 = 5 group by c2, c3 order by c3, c2; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |10       |85  |
|1 | SORT         |    |10       |84  |
|2 |  TABLE SCAN  |t2  |10       |80  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2]), filter(nil), 
      group([t2.c3], [t2.c2]), agg_func(nil)
  1 - output([t2.c3], [t2.c2]), filter(nil), sort_keys([t2.c3, ASC], [t2.c2, ASC])
  2 - output([t2.c3], [t2.c2]), filter([t2.c3 = ? AND t2.c1 = ? OR t2.c2 = ?]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 183   ***************
SQL: select c2, c1, c2, c1 from t2 where c3 = 'abc' and c1 = 4 or c2 = 5 group by c2, c3, c2, c2 desc, c3 order by c3, c2, c3, c3 desc, c2; 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |10       |85  |
|1 | SORT         |    |10       |84  |
|2 |  TABLE SCAN  |t2  |10       |80  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c2], [t2.c1], [t2.c2], [t2.c1]), filter(nil), 
      group([t2.c3], [t2.c2]), agg_func(nil)
  1 - output([t2.c3], [t2.c2], [t2.c1]), filter(nil), sort_keys([t2.c3, ASC], [t2.c2, ASC])
  2 - output([t2.c1], [t2.c3], [t2.c2]), filter([t2.c3 = ? AND t2.c1 = ? OR t2.c2 = ?]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 184   ***************
SQL: select * from t2, (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SORT                       |    |38       |187 |
|1 | NESTED-LOOP JOIN CARTESIAN|    |38       |168 |
|2 |  TABLE SCAN               |t2  |100      |78  |
|3 |  MATERIAL                 |    |1        |80  |
|4 |   SUBPLAN SCAN            |v   |1        |80  |
|5 |    MERGE GROUP BY         |    |1        |80  |
|6 |     SORT                  |    |1        |80  |
|7 |      TABLE SCAN           |t5  |1        |80  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), sort_keys([cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v.c3]), filter(nil)
  4 - output([v.c3]), filter(nil), 
      access([v.c3])
  5 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  6 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  7 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)

***************   Case 185   ***************
SQL: select * from (select c2 from t3 where c3 = 'abc' group by c2, c3 order by c3, c2) v2, t2, (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v where v.c3 > 0 and v2.c2 < 5 order by v.c3, v.c3+1, t2.c1; 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |SORT                         |    |10       |244 |
|1 | NESTED-LOOP JOIN CARTESIAN  |    |10       |240 |
|2 |  TABLE SCAN                 |t2  |100      |78  |
|3 |  MATERIAL                   |    |1        |159 |
|4 |   NESTED-LOOP JOIN CARTESIAN|    |1        |159 |
|5 |    SUBPLAN SCAN             |v   |1        |80  |
|6 |     MERGE GROUP BY          |    |1        |80  |
|7 |      SORT                   |    |1        |80  |
|8 |       TABLE SCAN            |t5  |1        |80  |
|9 |    MATERIAL                 |    |1        |80  |
|10|     SUBPLAN SCAN            |v2  |1        |80  |
|11|      MERGE GROUP BY         |    |1        |80  |
|12|       SORT                  |    |1        |80  |
|13|        TABLE SCAN           |t3  |1        |80  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([v2.c2], [t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), sort_keys([cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([t2.c1], [v2.c2], [t2.c2], [t2.c3], [v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v2.c2], [v.c3]), filter(nil)
  4 - output([v2.c2], [v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([v.c3]), filter(nil), 
      access([v.c3])
  6 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  7 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  8 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  9 - output([v2.c2]), filter(nil)
  10 - output([v2.c2]), filter(nil), 
      access([v2.c2])
  11 - output([t3.c2]), filter(nil), 
      group([t3.c2]), agg_func(nil)
  12 - output([t3.c2]), filter(nil), sort_keys([t3.c2, ASC])
  13 - output([t3.c2]), filter([t3.c3 = ?], [t3.c2 < ?]), 
      access([t3.c3], [t3.c2]), partitions(p0)

***************   Case 186   ***************
SQL: select * from t2, (select c3,c1 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SORT                       |    |38       |187 |
|1 | NESTED-LOOP JOIN CARTESIAN|    |38       |168 |
|2 |  TABLE SCAN               |t2  |100      |78  |
|3 |  MATERIAL                 |    |1        |80  |
|4 |   SUBPLAN SCAN            |v   |1        |80  |
|5 |    MERGE GROUP BY         |    |1        |80  |
|6 |     SORT                  |    |1        |80  |
|7 |      TABLE SCAN           |t5  |1        |80  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.c3], [v.c1]), filter(nil), sort_keys([cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([t2.c1], [t2.c2], [t2.c3], [v.c3], [v.c1]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v.c3], [v.c1]), filter(nil)
  4 - output([v.c3], [v.c1]), filter(nil), 
      access([v.c3], [v.c1])
  5 - output([t5.c3], [t5.c1]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  6 - output([t5.c2], [t5.c3], [t5.c1]), filter(nil), sort_keys([t5.c2, ASC])
  7 - output([t5.c1], [t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c1], [t5.c3], [t5.c2]), partitions(p0)

***************   Case 187   ***************
SQL: select * from t2 inner join (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v on t2.c2 = v.c3 where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SORT             |    |0        |158 |
|1 | HASH JOIN       |    |0        |158 |
|2 |  TABLE SCAN     |t2  |0        |79  |
|3 |  SUBPLAN SCAN   |v   |1        |80  |
|4 |   MERGE GROUP BY|    |1        |80  |
|5 |    SORT         |    |1        |80  |
|6 |     TABLE SCAN  |t5  |1        |80  |
==========================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), sort_keys([cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), 
      equal_conds([cast(t2.c2, DECIMAL(11, 0)) = cast(v.c3, DECIMAL(-1, -1))]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3], [cast(t2.c2, DECIMAL(11, 0))]), filter([cast(t2.c2, DECIMAL(11, 0)) > ?]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v.c3]), filter(nil), 
      access([v.c3])
  4 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  5 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  6 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)

***************   Case 188   ***************
SQL: select * from t2 inner join (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v using(c3) where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SORT                       |    |1        |163 |
|1 | NESTED-LOOP JOIN CARTESIAN|    |1        |163 |
|2 |  TABLE SCAN               |t2  |2        |84  |
|3 |  MATERIAL                 |    |1        |80  |
|4 |   SUBPLAN SCAN            |v   |1        |80  |
|5 |    MERGE GROUP BY         |    |1        |80  |
|6 |     SORT                  |    |1        |80  |
|7 |      TABLE SCAN           |t5  |1        |80  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), sort_keys([cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([t2.c1], [t2.c3], [t2.c2], [v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t2.c1], [t2.c3], [t2.c2]), filter([t2.c3 = ?]), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)
  3 - output([v.c3]), filter(nil)
  4 - output([v.c3]), filter(nil), 
      access([v.c3])
  5 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  6 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  7 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)

***************   Case 189   ***************
SQL: select * from t2 left join (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v on t2.c2 = v.c3 where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |SORT                  |    |34       |207 |
|1 | HASH RIGHT OUTER JOIN|    |34       |186 |
|2 |  SUBPLAN SCAN        |v   |2        |84  |
|3 |   MERGE GROUP BY     |    |2        |84  |
|4 |    SORT              |    |2        |84  |
|5 |     TABLE SCAN       |t5  |2        |84  |
|6 |  TABLE SCAN          |t2  |100      |78  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), sort_keys([v.c3, ASC], [cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([v.c3], [t2.c1], [t2.c2], [t2.c3]), filter([cast(v.c3, DECIMAL(-1, -1)) > ?]), 
      equal_conds([cast(t2.c2, DECIMAL(11, 0)) = cast(v.c3, DECIMAL(-1, -1))]), other_conds(nil)
  2 - output([v.c3]), filter(nil), 
      access([v.c3])
  3 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  4 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  5 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  6 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 190   ***************
SQL: select * from t2 right join (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v on t2.c2 = v.c3 where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |SORT                  |    |1        |158 |
|1 | HASH RIGHT OUTER JOIN|    |1        |158 |
|2 |  TABLE SCAN          |t2  |0        |79  |
|3 |  SUBPLAN SCAN        |v   |1        |80  |
|4 |   MERGE GROUP BY     |    |1        |80  |
|5 |    SORT              |    |1        |80  |
|6 |     TABLE SCAN       |t5  |1        |80  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), sort_keys([cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([t2.c1], [t2.c2], [t2.c3], [v.c3]), filter(nil), 
      equal_conds([cast(t2.c2, DECIMAL(11, 0)) = cast(v.c3, DECIMAL(-1, -1))]), other_conds(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3], [cast(t2.c2, DECIMAL(11, 0))]), filter([cast(t2.c2, DECIMAL(11, 0)) > ?]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([v.c3]), filter(nil), 
      access([v.c3])
  4 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  5 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  6 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)

***************   Case 191   ***************
SQL: select t3.c2, v2.c3 from t3, (select t2.c2, v.c3 from t2, (select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v where v.c3 > 0 group by t2.c2, v.c3 order by t2.c2, v.c3) v2 where t3.c1 = v2.c3 group by v2.c3, t3.c2 having v2.c3 > 0 order by v2.c3, t3.c2; 
========================================================
|ID|OPERATOR                       |NAME|EST. ROWS|COST|
--------------------------------------------------------
|0 |MERGE GROUP BY                 |    |6        |209 |
|1 | SORT                          |    |8        |208 |
|2 |  NESTED-LOOP JOIN             |    |8        |206 |
|3 |   SUBPLAN SCAN                |v2  |8        |166 |
|4 |    HASH GROUP BY              |    |8        |166 |
|5 |     NESTED-LOOP JOIN CARTESIAN|    |13       |162 |
|6 |      TABLE SCAN               |t2  |100      |78  |
|7 |      MATERIAL                 |    |1        |79  |
|8 |       SUBPLAN SCAN            |v   |1        |79  |
|9 |        MERGE GROUP BY         |    |1        |79  |
|10|         SORT                  |    |1        |79  |
|11|          TABLE SCAN           |t5  |1        |79  |
|12|   TABLE GET                   |t3  |1        |5   |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([t3.c2], [v2.c3]), filter(nil), 
      group([t3.c2]), agg_func(nil)
  1 - output([t3.c2], [v2.c3]), filter(nil), sort_keys([t3.c2, ASC])
  2 - output([t3.c2], [v2.c3]), filter(nil), 
      conds(nil), nl_params_([cast(v2.c3, DECIMAL(-1, -1))])
  3 - output([v2.c3]), filter(nil), 
      access([v2.c3])
  4 - output([v.c3]), filter(nil), 
      group([t2.c2]), agg_func(nil)
  5 - output([t2.c2], [v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  6 - output([t2.c2]), filter(nil), 
      access([t2.c2]), partitions(p0)
  7 - output([v.c3]), filter(nil)
  8 - output([v.c3]), filter(nil), 
      access([v.c3])
  9 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  10 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  11 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  12 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)

***************   Case 192   ***************
SQL: select * from t2 right join (select c2, c3 from t5 where c3 = 'abc' and c1 > 10 and c1 = 15 group by c2, c3 order by c3, c2) v on t2.c2 = v.c3 where v.c3 > 0 and v.c3 < 10 order by v.c3, v.c3+1, t2.c1; 
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |SORT                   |    |1        |46  |
|1 | NESTED-LOOP OUTER JOIN|    |1        |46  |
|2 |  TABLE GET            |t5  |1        |46  |
|3 |  TABLE SCAN           |t2  |0        |79  |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [t5.c2], [t5.c3]), filter(nil), sort_keys([cast(t5.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC]), prefix_pos(1)
  1 - output([t2.c1], [t2.c2], [t2.c3], [t5.c2], [t5.c3]), filter(nil), 
      conds([cast(t2.c2, DECIMAL(11, 0)) = cast(t5.c3, DECIMAL(-1, -1))]), nl_params_(nil)
  2 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?], [cast(t5.c3, DECIMAL(-1, -1)) < ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2], [t2.c3], [cast(t2.c2, DECIMAL(11, 0))]), filter([? > cast(t2.c2, DECIMAL(11, 0))], [cast(t2.c2, DECIMAL(11, 0)) > ?]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 193   ***************
SQL: select * from t2, (select c2, c3 from t5 where c3 = 'abc' and c1 > 10 and c1 = 15 group by c2, c3 order by c3, c2) v, t3 where t2.c2 = v.c3 and v.c3 > 0 and v.c3 < 10 order by v.c3, v.c3+1, t2.c1; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SORT                       |    |0        |125 |
|1 | NESTED-LOOP JOIN CARTESIAN|    |0        |125 |
|2 |  TABLE SCAN               |t3  |100      |78  |
|3 |  MATERIAL                 |    |0        |46  |
|4 |   NESTED-LOOP JOIN        |    |0        |46  |
|5 |    TABLE GET              |t5  |1        |46  |
|6 |    TABLE SCAN             |t2  |0        |79  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [t5.c2], [t5.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), sort_keys([cast(t5.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC]), prefix_pos(1)
  1 - output([t2.c1], [t2.c2], [t2.c3], [t5.c2], [t5.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
  3 - output([t2.c1], [t2.c2], [t2.c3], [t5.c2], [t5.c3]), filter(nil)
  4 - output([t2.c1], [t2.c2], [t2.c3], [t5.c2], [t5.c3]), filter(nil), 
      conds([cast(t2.c2, DECIMAL(11, 0)) = cast(t5.c3, DECIMAL(-1, -1))]), nl_params_(nil)
  5 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?], [cast(t5.c3, DECIMAL(-1, -1)) < ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  6 - output([t2.c1], [t2.c2], [t2.c3], [cast(t2.c2, DECIMAL(11, 0))]), filter([cast(t2.c2, DECIMAL(11, 0)) > ?], [? > cast(t2.c2, DECIMAL(11, 0))]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 194   ***************
SQL: select * from (select c2, c3 from t5 where c3 = 'abc' and c1 > 10 and c1 = 15 group by c2, c3 order by c3, c2) v left join t2 on t2.c2 = v.c3 where v.c3 > 0 and v.c3 < 10 order by v.c3, v.c3+1, t2.c1; 
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |SORT                   |    |1        |46  |
|1 | NESTED-LOOP OUTER JOIN|    |1        |46  |
|2 |  TABLE GET            |t5  |1        |46  |
|3 |  TABLE SCAN           |t2  |0        |79  |
================================================

Outputs & filters: 
-------------------------------------
  0 - output([t5.c2], [t5.c3], [t2.c1], [t2.c2], [t2.c3]), filter(nil), sort_keys([cast(t5.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC]), prefix_pos(1)
  1 - output([t2.c1], [t5.c2], [t5.c3], [t2.c2], [t2.c3]), filter(nil), 
      conds([cast(t2.c2, DECIMAL(11, 0)) = cast(t5.c3, DECIMAL(-1, -1))]), nl_params_(nil)
  2 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?], [cast(t5.c3, DECIMAL(-1, -1)) < ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2], [t2.c3], [cast(t2.c2, DECIMAL(11, 0))]), filter([? > cast(t2.c2, DECIMAL(11, 0))], [cast(t2.c2, DECIMAL(11, 0)) > ?]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

***************   Case 195   ***************
SQL: select t4.c2, v2.c3 from (select t2.c2, v.c3 from t2, (select c2, c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v, t3 where v.c3 > 0 group by t3.c2, v.c3 order by t3.c2, v.c3) v2, t4 where t4.c1 = v2.c3 group by t4.c2, v2.c3 having v2.c3 > 0 order by t4.c2, v2.c3; 
==========================================================
|ID|OPERATOR                         |NAME|EST. ROWS|COST|
----------------------------------------------------------
|0 |MERGE GROUP BY                   |    |7        |922 |
|1 | SORT                            |    |10       |922 |
|2 |  NESTED-LOOP JOIN               |    |10       |919 |
|3 |   SUBPLAN SCAN                  |v2  |10       |864 |
|4 |    HASH GROUP BY                |    |10       |864 |
|5 |     NESTED-LOOP JOIN CARTESIAN  |    |1250     |563 |
|6 |      TABLE SCAN                 |t3  |100      |78  |
|7 |      MATERIAL                   |    |13       |162 |
|8 |       NESTED-LOOP JOIN CARTESIAN|    |13       |162 |
|9 |        TABLE SCAN               |t2  |100      |78  |
|10|        MATERIAL                 |    |1        |79  |
|11|         SUBPLAN SCAN            |v   |1        |79  |
|12|          MERGE GROUP BY         |    |1        |79  |
|13|           SORT                  |    |1        |79  |
|14|            TABLE SCAN           |t5  |1        |79  |
|15|   TABLE GET                     |t4  |1        |5   |
==========================================================

Outputs & filters: 
-------------------------------------
  0 - output([t4.c2], [v2.c3]), filter(nil), 
      group([t4.c2]), agg_func(nil)
  1 - output([t4.c2], [v2.c3]), filter(nil), sort_keys([t4.c2, ASC])
  2 - output([t4.c2], [v2.c3]), filter(nil), 
      conds(nil), nl_params_([cast(v2.c3, DECIMAL(-1, -1))])
  3 - output([v2.c3]), filter(nil), 
      access([v2.c3])
  4 - output([v.c3]), filter(nil), 
      group([t3.c2]), agg_func(nil)
  5 - output([t3.c2], [v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  6 - output([t3.c2]), filter(nil), 
      access([t3.c2]), partitions(p0)
  7 - output([v.c3]), filter(nil)
  8 - output([v.c3]), filter(nil), 
      conds(nil), nl_params_(nil)
  9 - output(nil), filter(nil), 
      access([t2.c1]), partitions(p0)
  10 - output([v.c3]), filter(nil)
  11 - output([v.c3]), filter(nil), 
      access([v.c3])
  12 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  13 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  14 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  15 - output([t4.c2]), filter(nil), 
      access([t4.c2]), partitions(p0)

***************   Case 196   ***************
SQL: select * from t2 inner join (select c3 as a1, c3 as a2 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v on t2.c2 = v.a1 where v.a1 > 0 group by v.a1, v.a2, t2.c2 order by v.a1, v.a1+1, v.a2, t2.c1; 
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |SORT              |    |0        |158 |
|1 | HASH GROUP BY    |    |0        |158 |
|2 |  HASH JOIN       |    |0        |158 |
|3 |   TABLE SCAN     |t2  |0        |79  |
|4 |   SUBPLAN SCAN   |v   |1        |80  |
|5 |    MERGE GROUP BY|    |1        |80  |
|6 |     SORT         |    |1        |80  |
|7 |      TABLE SCAN  |t5  |1        |80  |
===========================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.a1], [v.a2]), filter(nil), sort_keys([cast(v.a1, DOUBLE(-1, -1)) + ?, ASC], [v.a2, ASC], [t2.c1, ASC])
  1 - output([v.a2], [t2.c1], [t2.c2], [t2.c3], [v.a1]), filter(nil), 
      group([v.a2], [t2.c2]), agg_func(nil)
  2 - output([v.a2], [t2.c1], [t2.c2], [t2.c3], [v.a1]), filter(nil), 
      equal_conds([cast(t2.c2, DECIMAL(11, 0)) = cast(v.a1, DECIMAL(-1, -1))]), other_conds(nil)
  3 - output([t2.c1], [t2.c2], [t2.c3], [cast(t2.c2, DECIMAL(11, 0))]), filter([cast(t2.c2, DECIMAL(11, 0)) > ?]), 
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  4 - output([v.a1], [v.a2]), filter(nil), 
      access([v.a1], [v.a2])
  5 - output([t5.c3], [t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  6 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  7 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?], [cast(t5.c3, DECIMAL(-1, -1)) > ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)

***************   Case 197   ***************
SQL: select * from t2 left join ((select c3 from t5 where c3 = 'abc' group by c2, c3 order by c3, c2) v left join t3 on v.c3 = t3.c3) on t2.c3 = v.c3 where v.c3 > 0 order by v.c3, v.c3+1, t2.c1; 
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |SORT                  |    |38       |350 |
|1 | HASH RIGHT OUTER JOIN|    |38       |325 |
|2 |  HASH OUTER JOIN     |    |2        |204 |
|3 |   SUBPLAN SCAN       |v   |2        |84  |
|4 |    MERGE GROUP BY    |    |2        |84  |
|5 |     SORT             |    |2        |84  |
|6 |      TABLE SCAN      |t5  |2        |84  |
|7 |   TABLE SCAN         |t3  |100      |78  |
|8 |  TABLE SCAN          |t2  |100      |78  |
===============================================

Outputs & filters: 
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [v.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), sort_keys([v.c3, ASC], [cast(v.c3, DOUBLE(-1, -1)) + ?, ASC], [t2.c1, ASC])
  1 - output([v.c3], [t2.c1], [t2.c2], [t2.c3], [t3.c1], [t3.c2], [t3.c3]), filter([cast(v.c3, DECIMAL(-1, -1)) > ?]), 
      equal_conds([t2.c3 = v.c3]), other_conds(nil)
  2 - output([v.c3], [t3.c1], [t3.c2], [t3.c3]), filter(nil), 
      equal_conds([v.c3 = t3.c3]), other_conds(nil)
  3 - output([v.c3]), filter(nil), 
      access([v.c3])
  4 - output([t5.c3]), filter(nil), 
      group([t5.c2]), agg_func(nil)
  5 - output([t5.c2], [t5.c3]), filter(nil), sort_keys([t5.c2, ASC])
  6 - output([t5.c3], [t5.c2]), filter([t5.c3 = ?]), 
      access([t5.c3], [t5.c2]), partitions(p0)
  7 - output([t3.c1], [t3.c3], [t3.c2]), filter(nil), 
      access([t3.c1], [t3.c3], [t3.c2]), partitions(p0)
  8 - output([t2.c1], [t2.c3], [t2.c2]), filter(nil), 
      access([t2.c1], [t2.c3], [t2.c2]), partitions(p0)

***************   Case 198   ***************
SQL: select * from t12 where c1=c2 and c1=cast('2010-10-10 00:00:00' as datetime); 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t12 |1        |79  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([t12.c1], [t12.c2], [t12.c3]), filter([cast(t12.c1, DATETIME(-1, -1)) = ?], [cast(t12.c1, DECIMAL(20, 0)) = cast(t12.c2, DECIMAL(-1, -1))]), 
      access([t12.c1], [t12.c2], [t12.c3]), partitions(p0)

***************   Case 199   ***************
SQL: select * from t1 where c2>(select c2 from t1 order by c2); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |34       |158 |
|1 | TABLE SCAN   |t1  |34       |80  |
|2 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 200   ***************
SQL: select * from t1 where c2>(select c2 from (select * from t1 order by c2) v); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |34       |158 |
|1 | TABLE SCAN   |t1  |34       |80  |
|2 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 201   ***************
SQL: select * from t1 where c2>(select c2 from t1 order by c2, (select c2 from t1)); 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |34       |237 |
|1 | TABLE SCAN    |t1  |34       |80  |
|2 | SUBPLAN FILTER|    |100      |157 |
|3 |  TABLE SCAN   |t1  |100      |78  |
|4 |  TABLE SCAN   |t1  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)
  4 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 202   ***************
SQL: select * from (select * from t1 order by c2) v; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |SORT       |    |100      |133 |
|1 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 203   ***************
SQL: select * from (select * from (select * from t1 order by c2) v) vv; 
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |SORT       |    |100      |133 |
|1 | TABLE SCAN|t1  |100      |78  |
====================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), sort_keys([t1.c2, ASC])
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)

***************   Case 204   ***************
SQL: select * from t1 having c2>(select c2 from t1 order by c2); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |34       |158 |
|1 | TABLE SCAN   |t1  |34       |80  |
|2 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 205   ***************
SQL: select * from t1 having c2>(select c2 from (select c2 from t1 order by c2) v); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |34       |158 |
|1 | TABLE SCAN   |t1  |34       |80  |
|2 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 206   ***************
SQL: select * from t1 order by (select c2 from t1 order by c2); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |100      |157 |
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 207   ***************
SQL: select * from t1 order by (select c2 from (select c2 from t1 order by c2) v); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |100      |157 |
|1 | TABLE SCAN   |t1  |100      |78  |
|2 | TABLE SCAN   |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 208   ***************
SQL: select * from t1 group by (select c2 from t1 order by c2); 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |MERGE GROUP BY |    |1        |159 |
|1 | SUBPLAN FILTER|    |100      |157 |
|2 |  TABLE SCAN   |t1  |100      |78  |
|3 |  TABLE SCAN   |t1  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      group(nil), agg_func(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 209   ***************
SQL: select * from t1 group by (select c2 from (select c2 from t1 order by c2) v); 
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |MERGE GROUP BY |    |1        |159 |
|1 | SUBPLAN FILTER|    |100      |157 |
|2 |  TABLE SCAN   |t1  |100      |78  |
|3 |  TABLE SCAN   |t1  |100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      group(nil), agg_func(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 210   ***************
SQL: select * from t1 where c2>(select c2 from t1 order by c2 limit 1); 
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |34       |160 |
|1 | TABLE SCAN   |t1  |34       |80  |
|2 | TOP-N SORT   |    |1        |80  |
|3 |  TABLE SCAN  |t1  |100      |78  |
=======================================

Outputs & filters: 
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter([t1.c2 > ?]), 
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t1.c2]), filter(nil), sort_keys([t1.c2, ASC]), topn(1)
  3 - output([t1.c2]), filter(nil), 
      access([t1.c2]), partitions(p0)

***************   Case 211   ***************
SQL: select * from (select c1 + c2 as c1 from t1 limit 5) a where exists (select c1 from t1 b where a.c1 = b.c1); 
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |5        |73  |
|1 | SUBPLAN SCAN   |a   |5        |46  |
|2 |  TABLE SCAN    |t1  |5        |46  |
|3 | TABLE GET      |b   |1        |5   |
=========================================

Outputs & filters: 
-------------------------------------
  0 - output([a.c1]), filter(nil), 
      conds(nil), nl_params_([a.c1])
  1 - output([a.c1]), filter(nil), 
      access([a.c1])
  2 - output([t1.c1 + t1.c2]), filter(nil), 
      access([t1.c1], [t1.c2]), partitions(p0), 
      limit(5), offset(nil)
  3 - output(nil), filter(nil), 
      access([b.c1]), partitions(p0)

