***************   Case 0   ***************
SQL: select distinct a from pjt1,pjt2; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |HASH DISTINCT              |    |10       |5128|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|2 |  TABLE SCAN               |pjt1|100      |78  |
|3 |  MATERIAL                 |    |100      |78  |
|4 |   TABLE SCAN              |pjt2|100      |78  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)

***************   Case 1   ***************
SQL: select distinct c from pjt1,pjt2,pjt3; 
=======================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST  |
-------------------------------------------------------
|0 |HASH DISTINCT               |    |10       |499691|
|1 | NESTED-LOOP JOIN CARTESIAN |    |1000000  |260652|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |10000    |2736  |
|3 |   TABLE SCAN               |pjt1|100      |78    |
|4 |   MATERIAL                 |    |100      |78    |
|5 |    TABLE SCAN              |pjt2|100      |78    |
|6 |  MATERIAL                  |    |100      |78    |
|7 |   TABLE SCAN               |pjt3|100      |78    |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  1 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), 
      access([pjt1.__pk_increment]), partitions(p0)
  4 - output([pjt2.c]), filter(nil)
  5 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)

***************   Case 2   ***************
SQL: select distinct a,d,g from pjt1,pjt2,pjt3,pjt4; 
==========================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST    |
----------------------------------------------------------
|0 |HASH DISTINCT                |    |500      |52914273|
|1 | NESTED-LOOP JOIN CARTESIAN  |    |100000000|26044429|
|2 |  NESTED-LOOP JOIN CARTESIAN |    |1000000  |260652  |
|3 |   NESTED-LOOP JOIN CARTESIAN|    |10000    |2736    |
|4 |    TABLE SCAN               |pjt1|100      |78      |
|5 |    MATERIAL                 |    |100      |78      |
|6 |     TABLE SCAN              |pjt2|100      |78      |
|7 |   MATERIAL                  |    |100      |78      |
|8 |    TABLE SCAN               |pjt3|100      |78      |
|9 |  MATERIAL                   |    |100      |78      |
|10|   TABLE SCAN                |pjt4|100      |78      |
==========================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt2.d], [pjt4.g]), filter(nil), 
      distinct([pjt1.a], [pjt2.d], [pjt4.g])
  1 - output([pjt1.a], [pjt2.d], [pjt4.g]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a], [pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a], [pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  4 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  5 - output([pjt2.d]), filter(nil)
  6 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  7 - output(nil), filter(nil)
  8 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  9 - output([pjt4.g]), filter(nil)
  10 - output([pjt4.g]), filter(nil), 
      access([pjt4.g]), partitions(p0)

***************   Case 3   ***************
SQL: select distinct a from pjt1,pjt2,pjt3 where b=d; 
=====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST |
-----------------------------------------------------
|0 |HASH DISTINCT              |    |10       |40532|
|1 | NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|2 |  HASH JOIN                |    |810      |203  |
|3 |   TABLE SCAN              |pjt2|100      |78   |
|4 |   TABLE SCAN              |pjt1|100      |78   |
|5 |  MATERIAL                 |    |100      |78   |
|6 |   TABLE SCAN              |pjt3|100      |78   |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      equal_conds([pjt1.b = pjt2.d]), other_conds(nil)
  3 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  4 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  5 - output(nil), filter(nil)
  6 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)

***************   Case 4   ***************
SQL: select distinct a,g from pjt1,pjt2,pjt3,pjt4 where b=d; 
========================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST   |
--------------------------------------------------------
|0 |HASH DISTINCT               |    |71       |4166065|
|1 | NESTED-LOOP JOIN CARTESIAN |    |8100000  |2109726|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |81000    |21168  |
|3 |   HASH JOIN                |    |810      |203    |
|4 |    TABLE SCAN              |pjt2|100      |78     |
|5 |    TABLE SCAN              |pjt1|100      |78     |
|6 |   MATERIAL                 |    |100      |78     |
|7 |    TABLE SCAN              |pjt3|100      |78     |
|8 |  MATERIAL                  |    |100      |78     |
|9 |   TABLE SCAN               |pjt4|100      |78     |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt4.g]), filter(nil), 
      distinct([pjt1.a], [pjt4.g])
  1 - output([pjt1.a], [pjt4.g]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a]), filter(nil), 
      equal_conds([pjt1.b = pjt2.d]), other_conds(nil)
  4 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  5 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  8 - output([pjt4.g]), filter(nil)
  9 - output([pjt4.g]), filter(nil), 
      access([pjt4.g]), partitions(p0)

***************   Case 5   ***************
SQL: select distinct c from pjt1,pjt2,pjt3,pjt4 where a=e; 
========================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST   |
--------------------------------------------------------
|0 |HASH DISTINCT               |    |10       |4045926|
|1 | NESTED-LOOP JOIN CARTESIAN |    |8100000  |2109726|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |81000    |21168  |
|3 |   HASH JOIN                |    |810      |203    |
|4 |    TABLE SCAN              |pjt1|100      |78     |
|5 |    TABLE SCAN              |pjt3|100      |78     |
|6 |   MATERIAL                 |    |100      |78     |
|7 |    TABLE SCAN              |pjt2|100      |78     |
|8 |  MATERIAL                  |    |100      |78     |
|9 |   TABLE SCAN               |pjt4|100      |78     |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  1 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), 
      equal_conds([pjt1.a = pjt3.e]), other_conds(nil)
  4 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  5 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  6 - output([pjt2.c]), filter(nil)
  7 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 6   ***************
SQL: select * from pjt1, (select distinct c from pjt2,pjt3) where a=c; 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |HASH JOIN                    |    |90       |5232|
|1 | SUBPLAN SCAN                |    |10       |5128|
|2 |  HASH DISTINCT              |    |10       |5128|
|3 |   NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|4 |    TABLE SCAN               |pjt2|100      |78  |
|5 |    MATERIAL                 |    |100      |78  |
|6 |     TABLE SCAN              |pjt3|100      |78  |
|7 | TABLE SCAN                  |pjt1|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt1.b], [.c]), filter(nil), 
      equal_conds([pjt1.a = .c]), other_conds(nil)
  1 - output([.c]), filter(nil), 
      access([.c])
  2 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  3 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  4 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  5 - output(nil), filter(nil)
  6 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  7 - output([pjt1.a], [pjt1.b]), filter(nil), 
      access([pjt1.a], [pjt1.b]), partitions(p0)

***************   Case 7   ***************
SQL: select * from pjt1, (select distinct c from pjt2,pjt3,pjt4 where d=g) where a=c; 
=======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST |
-------------------------------------------------------
|0 |HASH JOIN                    |    |90       |40636|
|1 | SUBPLAN SCAN                |    |10       |40532|
|2 |  HASH DISTINCT              |    |10       |40532|
|3 |   NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|4 |    HASH JOIN                |    |810      |203  |
|5 |     TABLE SCAN              |pjt4|100      |78   |
|6 |     TABLE SCAN              |pjt2|100      |78   |
|7 |    MATERIAL                 |    |100      |78   |
|8 |     TABLE SCAN              |pjt3|100      |78   |
|9 | TABLE SCAN                  |pjt1|100      |78   |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt1.b], [.c]), filter(nil), 
      equal_conds([pjt1.a = .c]), other_conds(nil)
  1 - output([.c]), filter(nil), 
      access([.c])
  2 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  3 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  4 - output([pjt2.c]), filter(nil), 
      equal_conds([pjt2.d = pjt4.g]), other_conds(nil)
  5 - output([pjt4.g]), filter(nil), 
      access([pjt4.g]), partitions(p0)
  6 - output([pjt2.d], [pjt2.c]), filter(nil), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  7 - output(nil), filter(nil)
  8 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  9 - output([pjt1.a], [pjt1.b]), filter(nil), 
      access([pjt1.a], [pjt1.b]), partitions(p0)

***************   Case 8   ***************
SQL: select distinct a from pjt1, (select distinct c from pjt2,pjt3,pjt4 where d=g) where a=1; 
=======================================================
|ID|OPERATOR                      |NAME|EST. ROWS|COST|
-------------------------------------------------------
|0 |LIMIT                         |    |1        |304 |
|1 | NESTED-LOOP JOIN CARTESIAN   |    |1        |304 |
|2 |  SUBPLAN SCAN                |    |1        |225 |
|3 |   HASH DISTINCT              |    |1        |225 |
|4 |    NESTED-LOOP JOIN CARTESIAN|    |1        |225 |
|5 |     HASH JOIN                |    |1        |147 |
|6 |      TABLE SCAN              |pjt4|100      |78  |
|7 |      TABLE SCAN              |pjt2|1        |46  |
|8 |     MATERIAL                 |    |100      |78  |
|9 |      TABLE SCAN              |pjt3|100      |78  |
|10|  MATERIAL                    |    |9        |79  |
|11|   TABLE SCAN                 |pjt1|9        |79  |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), limit(1), offset(nil)
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output(nil), filter(nil), 
      access(nil)
  3 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  4 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([pjt2.c]), filter(nil), 
      equal_conds([pjt2.d = pjt4.g]), other_conds(nil)
  6 - output([pjt4.g]), filter(nil), 
      access([pjt4.g]), partitions(p0)
  7 - output([pjt2.d], [pjt2.c]), filter(nil), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  10 - output([pjt1.a]), filter(nil)
  11 - output([pjt1.a]), filter([pjt1.a = ?]), 
      access([pjt1.a]), partitions(p0)

***************   Case 9   ***************
SQL: select distinct a from pjt1 where b in (select distinct c from pjt1,pjt2 where d>1); 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |HASH DISTINCT                |    |10       |4557|
|1 | SUBPLAN FILTER              |    |50       |4543|
|2 |  TABLE SCAN                 |pjt1|100      |78  |
|3 |  HASH DISTINCT              |    |10       |4409|
|4 |   NESTED-LOOP JOIN CARTESIAN|    |8550     |2363|
|5 |    TABLE SCAN               |pjt2|86       |79  |
|6 |    MATERIAL                 |    |100      |78  |
|7 |     TABLE SCAN              |pjt1|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter([pjt1.b = ANY(subquery(1))]), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  3 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  4 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([pjt2.c]), filter([pjt2.d > ?]), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt1.__pk_increment]), partitions(p0)

***************   Case 10   ***************
SQL: select distinct a from pjt1 where exists (select distinct c from pjt1,pjt2,pjt3 where d>1 and f=d); 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |HASH DISTINCT                |    |10       |328 |
|1 | SUBPLAN FILTER              |    |100      |302 |
|2 |  TABLE SCAN                 |pjt1|100      |78  |
|3 |  LIMIT                      |    |1        |223 |
|4 |   NESTED-LOOP JOIN CARTESIAN|    |1        |223 |
|5 |    HASH JOIN                |    |1        |145 |
|6 |     TABLE SCAN              |pjt2|86       |79  |
|7 |     TABLE SCAN              |pjt3|1        |46  |
|8 |    MATERIAL                 |    |100      |78  |
|9 |     TABLE SCAN              |pjt1|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  2 - output([pjt1.a]), filter(nil), startup_filter([?]), 
      access([pjt1.a]), partitions(p0)
  3 - output([1]), filter(nil), limit(1), offset(nil)
  4 - output(nil), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output(nil), filter(nil), 
      equal_conds([pjt3.f = pjt2.d]), other_conds(nil)
  6 - output([pjt2.d]), filter([pjt2.d > ?]), 
      access([pjt2.d]), partitions(p0)
  7 - output([pjt3.f]), filter(nil), 
      access([pjt3.f]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt1.__pk_increment]), partitions(p0)

***************   Case 11   ***************
SQL: select distinct a from pjt1,pjt2 where b in (select distinct c from pjt2,pjt3 where d in (select distinct e from pjt3,pjt4)); 
=========================================================
|ID|OPERATOR                       |NAME|EST. ROWS|COST |
---------------------------------------------------------
|0 |HASH DISTINCT                  |    |10       |24248|
|1 | SUBPLAN FILTER                |    |5000     |23050|
|2 |  NESTED-LOOP JOIN CARTESIAN   |    |10000    |2736 |
|3 |   TABLE SCAN                  |pjt1|100      |78   |
|4 |   MATERIAL                    |    |100      |78   |
|5 |    TABLE SCAN                 |pjt2|100      |78   |
|6 |  HASH DISTINCT                |    |10       |14688|
|7 |   SUBPLAN FILTER              |    |5000     |13491|
|8 |    NESTED-LOOP JOIN CARTESIAN |    |10000    |2736 |
|9 |     TABLE SCAN                |pjt2|100      |78   |
|10|     MATERIAL                  |    |100      |78   |
|11|      TABLE SCAN               |pjt3|100      |78   |
|12|    HASH DISTINCT              |    |10       |5128 |
|13|     NESTED-LOOP JOIN CARTESIAN|    |10000    |2736 |
|14|      TABLE SCAN               |pjt3|100      |78   |
|15|      MATERIAL                 |    |100      |78   |
|16|       TABLE SCAN              |pjt4|100      |78   |
=========================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter([pjt1.b = ANY(subquery(1))]), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([pjt1.a], [pjt1.b]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  4 - output(nil), filter(nil)
  5 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  6 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  7 - output([pjt2.c]), filter([pjt2.d = ANY(subquery(1))]), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  8 - output([pjt2.c], [pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  9 - output([pjt2.d], [pjt2.c]), filter(nil), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  10 - output(nil), filter(nil)
  11 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  12 - output([pjt3.e]), filter(nil), 
      distinct([pjt3.e])
  13 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  14 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  15 - output(nil), filter(nil)
  16 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 12   ***************
SQL: (select distinct a from pjt1,pjt2) union (select distinct c from pjt2 where exists (select distinct e from pjt3,pjt4)); 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |HASH UNION DISTINCT          |    |10100    |7502|
|1 | NESTED-LOOP JOIN CARTESIAN  |    |10000    |2736|
|2 |  TABLE SCAN                 |pjt1|100      |78  |
|3 |  MATERIAL                   |    |100      |78  |
|4 |   TABLE SCAN                |pjt2|100      |78  |
|5 | SUBPLAN FILTER              |    |100      |203 |
|6 |  TABLE SCAN                 |pjt2|100      |78  |
|7 |  LIMIT                      |    |1        |124 |
|8 |   NESTED-LOOP JOIN CARTESIAN|    |1        |124 |
|9 |    TABLE SCAN               |pjt3|1        |46  |
|10|    MATERIAL                 |    |100      |78  |
|11|     TABLE SCAN              |pjt4|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  5 - output([pjt2.c]), filter(nil), 
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  6 - output([pjt2.c]), filter(nil), startup_filter([?]), 
      access([pjt2.c]), partitions(p0)
  7 - output([1]), filter(nil), limit(1), offset(nil)
  8 - output(nil), filter(nil), 
      conds(nil), nl_params_(nil)
  9 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  10 - output(nil), filter(nil)
  11 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 13   ***************
SQL: (select distinct a from pjt1,pjt2) intersect (select distinct c from pjt2,(select distinct e from pjt3,pjt4) where c > 1);  select max(a) from pjt1,pjt2; 
========================================================
|ID|OPERATOR                       |NAME|EST. ROWS|COST|
--------------------------------------------------------
|0 |HASH INTERSECT DISTINCT        |    |855      |9122|
|1 | NESTED-LOOP JOIN CARTESIAN    |    |10000    |2736|
|2 |  TABLE SCAN                   |pjt1|100      |78  |
|3 |  MATERIAL                     |    |100      |78  |
|4 |   TABLE SCAN                  |pjt2|100      |78  |
|5 | NESTED-LOOP JOIN CARTESIAN    |    |855      |5429|
|6 |  TABLE SCAN                   |pjt2|86       |79  |
|7 |  MATERIAL                     |    |10       |5128|
|8 |   SUBPLAN SCAN                |    |10       |5128|
|9 |    HASH DISTINCT              |    |10       |5128|
|10|     NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|11|      TABLE SCAN               |pjt3|100      |78  |
|12|      MATERIAL                 |    |100      |78  |
|13|       TABLE SCAN              |pjt4|100      |78  |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil)
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  5 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  6 - output([pjt2.c]), filter([pjt2.c > ?]), 
      access([pjt2.c]), partitions(p0)
  7 - output(nil), filter(nil)
  8 - output(nil), filter(nil), 
      access(nil)
  9 - output([pjt3.e]), filter(nil), 
      distinct([pjt3.e])
  10 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  11 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  12 - output(nil), filter(nil)
  13 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 14   ***************
SQL: select max(a), min(c) from pjt1,pjt2,pjt3; 
=======================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST  |
-------------------------------------------------------
|0 |SCALAR GROUP BY             |    |1        |313941|
|1 | NESTED-LOOP JOIN CARTESIAN |    |1000000  |260652|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |10000    |2736  |
|3 |   TABLE SCAN               |pjt1|100      |78    |
|4 |   MATERIAL                 |    |100      |78    |
|5 |    TABLE SCAN              |pjt2|100      |78    |
|6 |  MATERIAL                  |    |100      |78    |
|7 |   TABLE SCAN               |pjt3|100      |78    |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(pjt1.a)], [T_FUN_MIN(pjt2.c)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt1.a)], [T_FUN_MIN(pjt2.c)])
  1 - output([pjt1.a], [pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a], [pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  4 - output([pjt2.c]), filter(nil)
  5 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)

***************   Case 15   ***************
SQL: select count(distinct g), max(d), min(a) from pjt1,pjt2,pjt3,pjt4; 
==========================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST    |
----------------------------------------------------------
|0 |SCALAR GROUP BY              |    |1        |33161562|
|1 | NESTED-LOOP JOIN CARTESIAN  |    |100000000|26044429|
|2 |  NESTED-LOOP JOIN CARTESIAN |    |1000000  |260652  |
|3 |   NESTED-LOOP JOIN CARTESIAN|    |10000    |2736    |
|4 |    TABLE SCAN               |pjt1|100      |78      |
|5 |    MATERIAL                 |    |100      |78      |
|6 |     TABLE SCAN              |pjt2|100      |78      |
|7 |   MATERIAL                  |    |100      |78      |
|8 |    TABLE SCAN               |pjt3|100      |78      |
|9 |  MATERIAL                   |    |100      |78      |
|10|   TABLE SCAN                |pjt4|100      |78      |
==========================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_COUNT(distinct pjt4.g)], [T_FUN_MAX(pjt2.d)], [T_FUN_MIN(pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_COUNT(distinct pjt4.g)], [T_FUN_MAX(pjt2.d)], [T_FUN_MIN(pjt1.a)])
  1 - output([pjt1.a], [pjt2.d], [pjt4.g]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a], [pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a], [pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  4 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  5 - output([pjt2.d]), filter(nil)
  6 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  7 - output(nil), filter(nil)
  8 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  9 - output([pjt4.g]), filter(nil)
  10 - output([pjt4.g]), filter(nil), 
      access([pjt4.g]), partitions(p0)

***************   Case 16   ***************
SQL: select sum(distinct a) from pjt1,pjt2,pjt3 where b=d; 
=====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST |
-----------------------------------------------------
|0 |SCALAR GROUP BY            |    |1        |24035|
|1 | NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|2 |  HASH JOIN                |    |810      |203  |
|3 |   TABLE SCAN              |pjt2|100      |78   |
|4 |   TABLE SCAN              |pjt1|100      |78   |
|5 |  MATERIAL                 |    |100      |78   |
|6 |   TABLE SCAN              |pjt3|100      |78   |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_SUM(distinct pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt1.a)])
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      equal_conds([pjt1.b = pjt2.d]), other_conds(nil)
  3 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  4 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  5 - output(nil), filter(nil)
  6 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)

***************   Case 17   ***************
SQL: select max(a) from pjt1,pjt2,pjt3,pjt4 where b=d; 
========================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST   |
--------------------------------------------------------
|0 |SCALAR GROUP BY             |    |1        |2396521|
|1 | NESTED-LOOP JOIN CARTESIAN |    |8100000  |2109726|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |81000    |21168  |
|3 |   HASH JOIN                |    |810      |203    |
|4 |    TABLE SCAN              |pjt2|100      |78     |
|5 |    TABLE SCAN              |pjt1|100      |78     |
|6 |   MATERIAL                 |    |100      |78     |
|7 |    TABLE SCAN              |pjt3|100      |78     |
|8 |  MATERIAL                  |    |100      |78     |
|9 |   TABLE SCAN               |pjt4|100      |78     |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt1.a)])
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a]), filter(nil), 
      equal_conds([pjt1.b = pjt2.d]), other_conds(nil)
  4 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  5 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 18   ***************
SQL: select avg(distinct c) from pjt1,pjt2,pjt3,pjt4 where a=e; 
========================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST   |
--------------------------------------------------------
|0 |SCALAR GROUP BY             |    |1        |2541367|
|1 | NESTED-LOOP JOIN CARTESIAN |    |8100000  |2109726|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |81000    |21168  |
|3 |   HASH JOIN                |    |810      |203    |
|4 |    TABLE SCAN              |pjt1|100      |78     |
|5 |    TABLE SCAN              |pjt3|100      |78     |
|6 |   MATERIAL                 |    |100      |78     |
|7 |    TABLE SCAN              |pjt2|100      |78     |
|8 |  MATERIAL                  |    |100      |78     |
|9 |   TABLE SCAN               |pjt4|100      |78     |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_SUM(distinct pjt2.c) / cast(T_FUN_COUNT(distinct pjt2.c), DECIMAL(20, 0))]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt2.c)], [T_FUN_COUNT(distinct pjt2.c)])
  1 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), 
      equal_conds([pjt1.a = pjt3.e]), other_conds(nil)
  4 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  5 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  6 - output([pjt2.c]), filter(nil)
  7 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 19   ***************
SQL: select * from pjt1, (select min(d) as x from pjt2,pjt3) where a=x; 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |NESTED-LOOP JOIN             |    |9        |3174|
|1 | SUBPLAN SCAN                |    |1        |3090|
|2 |  SCALAR GROUP BY            |    |1        |3090|
|3 |   NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|4 |    TABLE SCAN               |pjt2|100      |78  |
|5 |    MATERIAL                 |    |100      |78  |
|6 |     TABLE SCAN              |pjt3|100      |78  |
|7 | TABLE SCAN                  |pjt1|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt1.b], [.x]), filter(nil), 
      conds([pjt1.a = .x]), nl_params_(nil)
  1 - output([.x]), filter(nil), 
      access([.x])
  2 - output([T_FUN_MIN(pjt2.d)]), filter(nil), 
      group(nil), agg_func([T_FUN_MIN(pjt2.d)])
  3 - output([pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  4 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  5 - output(nil), filter(nil)
  6 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  7 - output([pjt1.a], [pjt1.b]), filter(nil), 
      access([pjt1.a], [pjt1.b]), partitions(p0)

***************   Case 20   ***************
SQL: select * from pjt1, (select count(distinct h)as x from pjt2,pjt3,pjt4 where d=g) where a=x; 
=======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST |
-------------------------------------------------------
|0 |NESTED-LOOP JOIN             |    |9        |24119|
|1 | SUBPLAN SCAN                |    |1        |24036|
|2 |  SCALAR GROUP BY            |    |1        |24035|
|3 |   NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|4 |    HASH JOIN                |    |810      |203  |
|5 |     TABLE SCAN              |pjt2|100      |78   |
|6 |     TABLE SCAN              |pjt4|100      |78   |
|7 |    MATERIAL                 |    |100      |78   |
|8 |     TABLE SCAN              |pjt3|100      |78   |
|9 | TABLE SCAN                  |pjt1|100      |78   |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt1.b], [.x]), filter(nil), 
      conds([pjt1.a = .x]), nl_params_(nil)
  1 - output([.x]), filter(nil), 
      access([.x])
  2 - output([T_FUN_COUNT(distinct pjt4.h)]), filter(nil), 
      group(nil), agg_func([T_FUN_COUNT(distinct pjt4.h)])
  3 - output([pjt4.h]), filter(nil), 
      conds(nil), nl_params_(nil)
  4 - output([pjt4.h]), filter(nil), 
      equal_conds([pjt2.d = pjt4.g]), other_conds(nil)
  5 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  6 - output([pjt4.g], [pjt4.h]), filter(nil), 
      access([pjt4.g], [pjt4.h]), partitions(p0)
  7 - output(nil), filter(nil)
  8 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  9 - output([pjt1.a], [pjt1.b]), filter(nil), 
      access([pjt1.a], [pjt1.b]), partitions(p0)

***************   Case 21   ***************
SQL: select min(b) from pjt1, (select count(distinct h)as x from pjt2,pjt3,pjt4 where d=g) where a=1; 
=========================================================
|ID|OPERATOR                       |NAME|EST. ROWS|COST |
---------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1        |24117|
|1 | NESTED-LOOP JOIN CARTESIAN    |    |9        |24117|
|2 |  TABLE SCAN                   |pjt1|9        |79   |
|3 |  MATERIAL                     |    |1        |24036|
|4 |   SUBPLAN SCAN                |    |1        |24036|
|5 |    SCALAR GROUP BY            |    |1        |24035|
|6 |     NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|7 |      HASH JOIN                |    |810      |203  |
|8 |       TABLE SCAN              |pjt2|100      |78   |
|9 |       TABLE SCAN              |pjt4|100      |78   |
|10|      MATERIAL                 |    |100      |78   |
|11|       TABLE SCAN              |pjt3|100      |78   |
=========================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MIN(pjt1.b)]), filter(nil), 
      group(nil), agg_func([T_FUN_MIN(pjt1.b)])
  1 - output([pjt1.b]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.b]), filter([pjt1.a = ?]), 
      access([pjt1.a], [pjt1.b]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access(nil)
  5 - output([T_FUN_COUNT(distinct pjt4.h)]), filter(nil), 
      group(nil), agg_func([T_FUN_COUNT(distinct pjt4.h)])
  6 - output([pjt4.h]), filter(nil), 
      conds(nil), nl_params_(nil)
  7 - output([pjt4.h]), filter(nil), 
      equal_conds([pjt2.d = pjt4.g]), other_conds(nil)
  8 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  9 - output([pjt4.g], [pjt4.h]), filter(nil), 
      access([pjt4.g], [pjt4.h]), partitions(p0)
  10 - output(nil), filter(nil)
  11 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)

***************   Case 22   ***************
SQL: select distinct a from pjt1 where b>(select sum(distinct c) from pjt1,pjt2 where d>1); 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |HASH DISTINCT                |    |10       |2755|
|1 | SUBPLAN FILTER              |    |34       |2745|
|2 |  TABLE SCAN                 |pjt1|34       |79  |
|3 |  SCALAR GROUP BY            |    |1        |2666|
|4 |   NESTED-LOOP JOIN CARTESIAN|    |8550     |2363|
|5 |    TABLE SCAN               |pjt2|86       |79  |
|6 |    MATERIAL                 |    |100      |78  |
|7 |     TABLE SCAN              |pjt1|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([pjt1.a]), filter([cast(pjt1.b, DECIMAL(11, 0)) > ?]), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  3 - output([T_FUN_SUM(distinct pjt2.c)]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt2.c)])
  4 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([pjt2.c]), filter([pjt2.d > ?]), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt1.__pk_increment]), partitions(p0)

***************   Case 23   ***************
SQL: select distinct a from pjt1 where b>(select avg(distinct d) from pjt1,pjt2,pjt3 where d>1 and f=d); 
=======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST |
-------------------------------------------------------
|0 |HASH DISTINCT                |    |10       |24311|
|1 | SUBPLAN FILTER              |    |34       |24301|
|2 |  TABLE SCAN                 |pjt1|34       |79   |
|3 |  SCALAR GROUP BY            |    |1        |24222|
|4 |   NESTED-LOOP JOIN CARTESIAN|    |76950    |20121|
|5 |    HASH JOIN                |    |770      |201  |
|6 |     TABLE SCAN              |pjt2|86       |79   |
|7 |     TABLE SCAN              |pjt3|100      |78   |
|8 |    MATERIAL                 |    |100      |78   |
|9 |     TABLE SCAN              |pjt1|100      |78   |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([pjt1.a]), filter([cast(pjt1.b, DECIMAL(11, 0)) > ?]), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  3 - output([T_FUN_SUM(distinct pjt2.d) / cast(T_FUN_COUNT(distinct pjt2.d), DECIMAL(20, 0))]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt2.d)], [T_FUN_COUNT(distinct pjt2.d)])
  4 - output([pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([pjt2.d]), filter(nil), 
      equal_conds([pjt3.f = pjt2.d]), other_conds(nil)
  6 - output([pjt2.d]), filter([pjt2.d > ?]), 
      access([pjt2.d]), partitions(p0)
  7 - output([pjt3.f]), filter(nil), 
      access([pjt3.f]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt1.__pk_increment]), partitions(p0)

***************   Case 24   ***************
SQL: select max(a) from pjt1,pjt2 where b > (select min(c) from pjt2,pjt3 where d < (select sum(distinct e) from pjt3,pjt4)); 
========================================================
|ID|OPERATOR                       |NAME|EST. ROWS|COST|
--------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1        |5479|
|1 | SUBPLAN FILTER                |    |3334     |5361|
|2 |  NESTED-LOOP JOIN CARTESIAN   |    |3334     |1019|
|3 |   TABLE SCAN                  |pjt2|100      |78  |
|4 |   MATERIAL                    |    |34       |81  |
|5 |    TABLE SCAN                 |pjt1|34       |80  |
|6 |  SCALAR GROUP BY              |    |1        |4284|
|7 |   SUBPLAN FILTER              |    |3334     |4166|
|8 |    NESTED-LOOP JOIN CARTESIAN |    |3334     |1018|
|9 |     TABLE SCAN                |pjt3|100      |78  |
|10|     MATERIAL                  |    |34       |79  |
|11|      TABLE SCAN               |pjt2|34       |79  |
|12|    SCALAR GROUP BY            |    |1        |3090|
|13|     NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|14|      TABLE SCAN               |pjt3|100      |78  |
|15|      MATERIAL                 |    |100      |78  |
|16|       TABLE SCAN              |pjt4|100      |78  |
========================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt1.a)])
  1 - output([pjt1.a]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  4 - output([pjt1.a]), filter(nil)
  5 - output([pjt1.a]), filter([pjt1.b > ?]), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  6 - output([T_FUN_MIN(pjt2.c)]), filter(nil), 
      group(nil), agg_func([T_FUN_MIN(pjt2.c)])
  7 - output([pjt2.c]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  8 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  9 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  10 - output([pjt2.c]), filter(nil)
  11 - output([pjt2.c]), filter([cast(pjt2.d, DECIMAL(11, 0)) < ?]), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  12 - output([T_FUN_SUM(distinct pjt3.e)]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt3.e)])
  13 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  14 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  15 - output(nil), filter(nil)
  16 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 25   ***************
SQL: (select count(distinct a) from pjt1,pjt2) union (select max(c) from pjt2 where d>(select avg(distinct e) from pjt3,pjt4)); 
=======================================================
|ID|OPERATOR                      |NAME|EST. ROWS|COST|
-------------------------------------------------------
|0 |MERGE UNION DISTINCT          |    |2        |6438|
|1 | SCALAR GROUP BY              |    |1        |3090|
|2 |  NESTED-LOOP JOIN CARTESIAN  |    |10000    |2736|
|3 |   TABLE SCAN                 |pjt1|100      |78  |
|4 |   MATERIAL                   |    |100      |78  |
|5 |    TABLE SCAN                |pjt2|100      |78  |
|6 | SCALAR GROUP BY              |    |1        |3349|
|7 |  SUBPLAN FILTER              |    |34       |3348|
|8 |   TABLE SCAN                 |pjt2|34       |79  |
|9 |   SCALAR GROUP BY            |    |1        |3269|
|10|    NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|11|     TABLE SCAN               |pjt3|100      |78  |
|12|     MATERIAL                 |    |100      |78  |
|13|      TABLE SCAN              |pjt4|100      |78  |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([UNION([1])]), filter(nil)
  1 - output([T_FUN_COUNT(distinct pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_COUNT(distinct pjt1.a)])
  2 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  4 - output(nil), filter(nil)
  5 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  6 - output([cast(T_FUN_MAX(pjt2.c), BIGINT(20, 0))]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt2.c)])
  7 - output([pjt2.c]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  8 - output([pjt2.c]), filter([cast(pjt2.d, DECIMAL(11, 0)) > ?]), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  9 - output([T_FUN_SUM(distinct pjt3.e) / cast(T_FUN_COUNT(distinct pjt3.e), DECIMAL(20, 0))]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt3.e)], [T_FUN_COUNT(distinct pjt3.e)])
  10 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  11 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  12 - output(nil), filter(nil)
  13 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 26   ***************
SQL: (select max(a) from pjt1, pjt2) minus (select distinct e from pjt3,pjt4); 
======================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST |
------------------------------------------------------
|0 |HASH EXCEPT DISTINCT        |    |1        |10345|
|1 | SCALAR GROUP BY            |    |1        |3090 |
|2 |  NESTED-LOOP JOIN CARTESIAN|    |10000    |2736 |
|3 |   TABLE SCAN               |pjt1|100      |78   |
|4 |   MATERIAL                 |    |100      |78   |
|5 |    TABLE SCAN              |pjt2|100      |78   |
|6 | NESTED-LOOP JOIN CARTESIAN |    |10000    |2736 |
|7 |  TABLE SCAN                |pjt3|100      |78   |
|8 |  MATERIAL                  |    |100      |78   |
|9 |   TABLE SCAN               |pjt4|100      |78   |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil)
  1 - output([T_FUN_MAX(pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt1.a)])
  2 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  4 - output(nil), filter(nil)
  5 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  6 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  7 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  8 - output(nil), filter(nil)
  9 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 27   ***************
SQL: select sum(distinct b) from pjt1, (select distinct c from pjt2, pjt3) where a = c; 
=======================================================
|ID|OPERATOR                      |NAME|EST. ROWS|COST|
-------------------------------------------------------
|0 |SCALAR GROUP BY               |    |1        |5235|
|1 | HASH JOIN                    |    |90       |5232|
|2 |  SUBPLAN SCAN                |    |10       |5128|
|3 |   HASH DISTINCT              |    |10       |5128|
|4 |    NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|5 |     TABLE SCAN               |pjt2|100      |78  |
|6 |     MATERIAL                 |    |100      |78  |
|7 |      TABLE SCAN              |pjt3|100      |78  |
|8 |  TABLE SCAN                  |pjt1|100      |78  |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_SUM(distinct pjt1.b)]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(distinct pjt1.b)])
  1 - output([pjt1.b]), filter(nil), 
      equal_conds([pjt1.a = .c]), other_conds(nil)
  2 - output([.c]), filter(nil), 
      access([.c])
  3 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  4 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  5 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  6 - output(nil), filter(nil)
  7 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  8 - output([pjt1.a], [pjt1.b]), filter(nil), 
      access([pjt1.a], [pjt1.b]), partitions(p0)

***************   Case 28   ***************
SQL: select distinct a from pjt1, pjt2 where b > (select max(e) from pjt3, pjt4); 
======================================================
|ID|OPERATOR                     |NAME|EST. ROWS|COST|
------------------------------------------------------
|0 |HASH DISTINCT                |    |10       |4966|
|1 | SUBPLAN FILTER              |    |3334     |4167|
|2 |  NESTED-LOOP JOIN CARTESIAN |    |3334     |1019|
|3 |   TABLE SCAN                |pjt2|100      |78  |
|4 |   MATERIAL                  |    |34       |81  |
|5 |    TABLE SCAN               |pjt1|34       |80  |
|6 |  SCALAR GROUP BY            |    |1        |3090|
|7 |   NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|8 |    TABLE SCAN               |pjt3|100      |78  |
|9 |    MATERIAL                 |    |100      |78  |
|10|     TABLE SCAN              |pjt4|100      |78  |
======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  4 - output([pjt1.a]), filter(nil)
  5 - output([pjt1.a]), filter([pjt1.b > ?]), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  6 - output([T_FUN_MAX(pjt3.e)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt3.e)])
  7 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  8 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  9 - output(nil), filter(nil)
  10 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 29   ***************
SQL: select count(distinct a) from pjt1,pjt2 where b in (select distinct c from pjt2,pjt3 where d < (select max(e) from pjt3,pjt4)); 
=========================================================
|ID|OPERATOR                       |NAME|EST. ROWS|COST |
---------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1        |13411|
|1 | SUBPLAN FILTER                |    |5000     |13234|
|2 |  NESTED-LOOP JOIN CARTESIAN   |    |10000    |2736 |
|3 |   TABLE SCAN                  |pjt1|100      |78   |
|4 |   MATERIAL                    |    |100      |78   |
|5 |    TABLE SCAN                 |pjt2|100      |78   |
|6 |  HASH DISTINCT                |    |10       |4966 |
|7 |   SUBPLAN FILTER              |    |3334     |4167 |
|8 |    NESTED-LOOP JOIN CARTESIAN |    |3334     |1019 |
|9 |     TABLE SCAN                |pjt3|100      |78   |
|10|     MATERIAL                  |    |34       |81   |
|11|      TABLE SCAN               |pjt2|34       |80   |
|12|    SCALAR GROUP BY            |    |1        |3090 |
|13|     NESTED-LOOP JOIN CARTESIAN|    |10000    |2736 |
|14|      TABLE SCAN               |pjt3|100      |78   |
|15|      MATERIAL                 |    |100      |78   |
|16|       TABLE SCAN              |pjt4|100      |78   |
=========================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_COUNT(distinct pjt1.a)]), filter(nil), 
      group(nil), agg_func([T_FUN_COUNT(distinct pjt1.a)])
  1 - output([pjt1.a]), filter([pjt1.b = ANY(subquery(1))]), 
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([pjt1.b], [pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  4 - output(nil), filter(nil)
  5 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)
  6 - output([pjt2.c]), filter(nil), 
      distinct([pjt2.c])
  7 - output([pjt2.c]), filter(nil), 
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  8 - output([pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  9 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)
  10 - output([pjt2.c]), filter(nil)
  11 - output([pjt2.c]), filter([pjt2.d < ?]), 
      access([pjt2.d], [pjt2.c]), partitions(p0)
  12 - output([T_FUN_MAX(pjt3.e)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt3.e)])
  13 - output([pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  14 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  15 - output(nil), filter(nil)
  16 - output(nil), filter(nil), 
      access([pjt4.__pk_increment]), partitions(p0)

***************   Case 30   ***************
SQL: select distinct a, c from pjt1,pjt2; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |HASH DISTINCT              |    |71       |5289|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|2 |  TABLE SCAN               |pjt1|100      |78  |
|3 |  MATERIAL                 |    |100      |78  |
|4 |   TABLE SCAN              |pjt2|100      |78  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a], [pjt2.c]), filter(nil), 
      distinct([pjt1.a], [pjt2.c])
  1 - output([pjt1.a], [pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  3 - output([pjt2.c]), filter(nil)
  4 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)

***************   Case 31   ***************
SQL: select distinct a from pjt1,pjt2,pjt3 where c=e; 
=====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST |
-----------------------------------------------------
|0 |HASH DISTINCT              |    |10       |40532|
|1 | NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|2 |  HASH JOIN                |    |810      |203  |
|3 |   TABLE SCAN              |pjt2|100      |78   |
|4 |   TABLE SCAN              |pjt3|100      |78   |
|5 |  MATERIAL                 |    |100      |78   |
|6 |   TABLE SCAN              |pjt1|100      |78   |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output(nil), filter(nil), 
      equal_conds([pjt2.c = pjt3.e]), other_conds(nil)
  3 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  4 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)
  5 - output([pjt1.a]), filter(nil)
  6 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)

***************   Case 32   ***************
SQL: select distinct a + d - e from pjt1,pjt2,pjt3; 
=======================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST  |
-------------------------------------------------------
|0 |HASH DISTINCT               |    |500      |499797|
|1 | NESTED-LOOP JOIN CARTESIAN |    |1000000  |260652|
|2 |  NESTED-LOOP JOIN CARTESIAN|    |10000    |2736  |
|3 |   TABLE SCAN               |pjt1|100      |78    |
|4 |   MATERIAL                 |    |100      |78    |
|5 |    TABLE SCAN              |pjt2|100      |78    |
|6 |  MATERIAL                  |    |100      |78    |
|7 |   TABLE SCAN               |pjt3|100      |78    |
=======================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a + pjt2.d - pjt3.e]), filter(nil), 
      distinct([pjt1.a + pjt2.d - pjt3.e])
  1 - output([pjt1.a], [pjt2.d], [pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a], [pjt2.d]), filter(nil), 
      conds(nil), nl_params_(nil)
  3 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  4 - output([pjt2.d]), filter(nil)
  5 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  6 - output([pjt3.e]), filter(nil)
  7 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)

***************   Case 33   ***************
SQL: select avg(b) from pjt1, pjt2; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY            |    |1        |3269|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|2 |  TABLE SCAN               |pjt1|100      |78  |
|3 |  MATERIAL                 |    |100      |78  |
|4 |   TABLE SCAN              |pjt2|100      |78  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_SUM(pjt1.b) / cast(T_FUN_COUNT(pjt1.b), DECIMAL(20, 0))]), filter(nil), 
      group(nil), agg_func([T_FUN_SUM(pjt1.b)], [T_FUN_COUNT(pjt1.b)])
  1 - output([pjt1.b]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.b]), filter(nil), 
      access([pjt1.b]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)

***************   Case 34   ***************
SQL: select max(a), sum(b) from pjt1, pjt2; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY            |    |1        |3269|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|2 |  TABLE SCAN               |pjt1|100      |78  |
|3 |  MATERIAL                 |    |100      |78  |
|4 |   TABLE SCAN              |pjt2|100      |78  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(pjt1.a)], [T_FUN_SUM(pjt1.b)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt1.a)], [T_FUN_SUM(pjt1.b)])
  1 - output([pjt1.a], [pjt1.b]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a], [pjt1.b]), filter(nil), 
      access([pjt1.a], [pjt1.b]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil), 
      access([pjt2.__pk_increment]), partitions(p0)

***************   Case 35   ***************
SQL: select max(a+c) from pjt1, pjt2; 
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY            |    |1        |3090|
|1 | NESTED-LOOP JOIN CARTESIAN|    |10000    |2736|
|2 |  TABLE SCAN               |pjt1|100      |78  |
|3 |  MATERIAL                 |    |100      |78  |
|4 |   TABLE SCAN              |pjt2|100      |78  |
====================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_MAX(pjt1.a + pjt2.c)]), filter(nil), 
      group(nil), agg_func([T_FUN_MAX(pjt1.a + pjt2.c)])
  1 - output([pjt1.a], [pjt2.c]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  3 - output([pjt2.c]), filter(nil)
  4 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)

***************   Case 36   ***************
SQL: select distinct a, e from ((select a from pjt1) union (select c from pjt2)), pjt3; 
=====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST |
-----------------------------------------------------
|0 |HASH DISTINCT              |    |142      |10592|
|1 | NESTED-LOOP JOIN CARTESIAN|    |20000    |5485 |
|2 |  SUBPLAN SCAN             |    |200      |248  |
|3 |   HASH UNION DISTINCT     |    |200      |245  |
|4 |    TABLE SCAN             |pjt1|100      |78   |
|5 |    TABLE SCAN             |pjt2|100      |78   |
|6 |  MATERIAL                 |    |100      |78   |
|7 |   TABLE SCAN              |pjt3|100      |78   |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([.a], [pjt3.e]), filter(nil), 
      distinct([.a], [pjt3.e])
  1 - output([.a], [pjt3.e]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([.a]), filter(nil), 
      access([.a])
  3 - output([UNION([1])]), filter(nil)
  4 - output([pjt1.a]), filter(nil), 
      access([pjt1.a]), partitions(p0)
  5 - output([pjt2.c]), filter(nil), 
      access([pjt2.c]), partitions(p0)
  6 - output([pjt3.e]), filter(nil)
  7 - output([pjt3.e]), filter(nil), 
      access([pjt3.e]), partitions(p0)

***************   Case 37   ***************
SQL: select distinct a from pjt3, pjt1 join pjt2 on b=d; 
=====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST |
-----------------------------------------------------
|0 |HASH DISTINCT              |    |10       |40532|
|1 | NESTED-LOOP JOIN CARTESIAN|    |81000    |21168|
|2 |  HASH JOIN                |    |810      |203  |
|3 |   TABLE SCAN              |pjt2|100      |78   |
|4 |   TABLE SCAN              |pjt1|100      |78   |
|5 |  MATERIAL                 |    |100      |78   |
|6 |   TABLE SCAN              |pjt3|100      |78   |
=====================================================

Outputs & filters: 
-------------------------------------
  0 - output([pjt1.a]), filter(nil), 
      distinct([pjt1.a])
  1 - output([pjt1.a]), filter(nil), 
      conds(nil), nl_params_(nil)
  2 - output([pjt1.a]), filter(nil), 
      equal_conds([pjt1.b = pjt2.d]), other_conds(nil)
  3 - output([pjt2.d]), filter(nil), 
      access([pjt2.d]), partitions(p0)
  4 - output([pjt1.b], [pjt1.a]), filter(nil), 
      access([pjt1.b], [pjt1.a]), partitions(p0)
  5 - output(nil), filter(nil)
  6 - output(nil), filter(nil), 
      access([pjt3.__pk_increment]), partitions(p0)

***************   Case 38   ***************
SQL: select sum(c1) from t1 group by c1, c2; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([cast(t1.c1, DECIMAL(11, 0))]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 39   ***************
SQL: select sum(c1) from t1 group by c2, c1; 
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |100      |78  |
===================================

Outputs & filters: 
-------------------------------------
  0 - output([cast(t1.c1, DECIMAL(11, 0))]), filter(nil), 
      access([t1.c1]), partitions(p0)

***************   Case 40   ***************
SQL: select uniq_c2, sum(uniq_c2) from pullup1 group by uniq_c2, pk; 
============================================
|ID|OPERATOR  |NAME         |EST. ROWS|COST|
--------------------------------------------
|0 |TABLE SCAN|pullup1(uniq)|100      |78  |
============================================

Outputs & filters: 
-------------------------------------
  0 - output([pullup1.uniq_c2], [cast(pullup1.uniq_c2, DECIMAL(11, 0))]), filter(nil), 
      access([pullup1.uniq_c2]), partitions(p0)

***************   Case 41   ***************
SQL: select sum(c1) from test_simp group by c1, c2 ,c3; 
========================================
|ID|OPERATOR  |NAME     |EST. ROWS|COST|
----------------------------------------
|0 |TABLE SCAN|test_simp|100      |78  |
========================================

Outputs & filters: 
-------------------------------------
  0 - output([cast(test_simp.c1, DECIMAL(11, 0))]), filter(nil), 
      access([test_simp.c1]), partitions(p0)

***************   Case 42   ***************
SQL: select sum(c1) from test_simp group by c2 ,c3; 
==================================================
|ID|OPERATOR      |NAME           |EST. ROWS|COST|
--------------------------------------------------
|0 |MERGE GROUP BY|               |71       |116 |
|1 | SORT         |               |100      |109 |
|2 |  TABLE SCAN  |test_simp(uniq)|100      |78  |
==================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_SUM(test_simp.c1)]), filter(nil), 
      group([test_simp.c3], [test_simp.c2]), agg_func([T_FUN_SUM(test_simp.c1)])
  1 - output([test_simp.c3], [test_simp.c2], [test_simp.c1]), filter(nil), sort_keys([test_simp.c3, ASC], [test_simp.c2, ASC]), prefix_pos(1)
  2 - output([test_simp.c1], [test_simp.c2], [test_simp.c3]), filter(nil), 
      access([test_simp.c1], [test_simp.c2], [test_simp.c3]), partitions(p0)

***************   Case 43   ***************
SQL: select sum(c1) from test_simp group by c2 ,c3, c4; 
==================================================
|ID|OPERATOR      |NAME           |EST. ROWS|COST|
--------------------------------------------------
|0 |MERGE GROUP BY|               |100      |95  |
|1 | SORT         |               |100      |87  |
|2 |  TABLE SCAN  |test_simp(uniq)|100      |78  |
==================================================

Outputs & filters: 
-------------------------------------
  0 - output([T_FUN_SUM(test_simp.c1)]), filter(nil), 
      group([test_simp.c3], [test_simp.c4], [test_simp.c2]), agg_func([T_FUN_SUM(test_simp.c1)])
  1 - output([test_simp.c3], [test_simp.c4], [test_simp.c2], [test_simp.c1]), filter(nil), sort_keys([test_simp.c3, ASC], [test_simp.c4, ASC], [test_simp.c2, ASC]), prefix_pos(2)
  2 - output([test_simp.c1], [test_simp.c2], [test_simp.c3], [test_simp.c4]), filter(nil), 
      access([test_simp.c1], [test_simp.c2], [test_simp.c3], [test_simp.c4]), partitions(p0)

